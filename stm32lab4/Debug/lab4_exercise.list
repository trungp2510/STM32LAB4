
lab4_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d68  08002d68  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d68  08002d68  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d68  08002d68  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d68  08002d68  00012d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  2000007c  08002dec  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08002dec  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f58  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  00029ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017119  00000000  00000000  0002d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c94a  00000000  00000000  000443f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826eb  00000000  00000000  00050d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d342e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a88  00000000  00000000  000d3484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d2c 	.word	0x08002d2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08002d2c 	.word	0x08002d2c

0800014c <isButtonPressed>:
int keyReg2[3] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg3[3] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int TimeForKeyPress[3] = {200,200,200};


int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000098 	.word	0x20000098

08000180 <subKeyProcess>:
void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000098 	.word	0x20000098

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e08c      	b.n	80002c6 <getKeyInput+0x126>
		keyReg0[i] = keyReg1[i];
 80001ac:	4a4a      	ldr	r2, [pc, #296]	; (80002d8 <getKeyInput+0x138>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4949      	ldr	r1, [pc, #292]	; (80002dc <getKeyInput+0x13c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001bc:	4a48      	ldr	r2, [pc, #288]	; (80002e0 <getKeyInput+0x140>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4944      	ldr	r1, [pc, #272]	; (80002d8 <getKeyInput+0x138>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch(i){
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d021      	beq.n	8000216 <getKeyInput+0x76>
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2b02      	cmp	r3, #2
 80001d6:	dc2a      	bgt.n	800022e <getKeyInput+0x8e>
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d003      	beq.n	80001e6 <getKeyInput+0x46>
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d00c      	beq.n	80001fe <getKeyInput+0x5e>
 80001e4:	e023      	b.n	800022e <getKeyInput+0x8e>
		case 0:
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port,BUTTON0_Pin);
 80001e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ea:	483e      	ldr	r0, [pc, #248]	; (80002e4 <getKeyInput+0x144>)
 80001ec:	f001 fd72 	bl	8001cd4 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4619      	mov	r1, r3
 80001f4:	4a3a      	ldr	r2, [pc, #232]	; (80002e0 <getKeyInput+0x140>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001fc:	e017      	b.n	800022e <getKeyInput+0x8e>
		case 1:
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,BUTTON1_Pin);
 80001fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000202:	4838      	ldr	r0, [pc, #224]	; (80002e4 <getKeyInput+0x144>)
 8000204:	f001 fd66 	bl	8001cd4 <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	4619      	mov	r1, r3
 800020c:	4a34      	ldr	r2, [pc, #208]	; (80002e0 <getKeyInput+0x140>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000214:	e00b      	b.n	800022e <getKeyInput+0x8e>
		case 2:
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port,BUTTON2_Pin);
 8000216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800021a:	4832      	ldr	r0, [pc, #200]	; (80002e4 <getKeyInput+0x144>)
 800021c:	f001 fd5a 	bl	8001cd4 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	4619      	mov	r1, r3
 8000224:	4a2e      	ldr	r2, [pc, #184]	; (80002e0 <getKeyInput+0x140>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800022c:	bf00      	nop
		}
		if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i])){
 800022e:	4a2b      	ldr	r2, [pc, #172]	; (80002dc <getKeyInput+0x13c>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000236:	4928      	ldr	r1, [pc, #160]	; (80002d8 <getKeyInput+0x138>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023e:	429a      	cmp	r2, r3
 8000240:	d13e      	bne.n	80002c0 <getKeyInput+0x120>
 8000242:	4a25      	ldr	r2, [pc, #148]	; (80002d8 <getKeyInput+0x138>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	4925      	ldr	r1, [pc, #148]	; (80002e0 <getKeyInput+0x140>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000252:	429a      	cmp	r2, r3
 8000254:	d134      	bne.n	80002c0 <getKeyInput+0x120>
			if(keyReg3[i] != keyReg2[i]){
 8000256:	4a24      	ldr	r2, [pc, #144]	; (80002e8 <getKeyInput+0x148>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4920      	ldr	r1, [pc, #128]	; (80002e0 <getKeyInput+0x140>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d016      	beq.n	8000298 <getKeyInput+0xf8>
				keyReg3[i] = keyReg2[i];
 800026a:	4a1d      	ldr	r2, [pc, #116]	; (80002e0 <getKeyInput+0x140>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000272:	491d      	ldr	r1, [pc, #116]	; (80002e8 <getKeyInput+0x148>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(keyReg2[i] == PRESSED_STATE){
 800027a:	4a19      	ldr	r2, [pc, #100]	; (80002e0 <getKeyInput+0x140>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d11c      	bne.n	80002c0 <getKeyInput+0x120>
					subKeyProcess(i);
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f7ff ff7a 	bl	8000180 <subKeyProcess>
					TimeForKeyPress[i] = 200;
 800028c:	4a17      	ldr	r2, [pc, #92]	; (80002ec <getKeyInput+0x14c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	21c8      	movs	r1, #200	; 0xc8
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000296:	e013      	b.n	80002c0 <getKeyInput+0x120>
				}
			}
			else{
				TimeForKeyPress[i]--;
 8000298:	4a14      	ldr	r2, [pc, #80]	; (80002ec <getKeyInput+0x14c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a0:	1e5a      	subs	r2, r3, #1
 80002a2:	4912      	ldr	r1, [pc, #72]	; (80002ec <getKeyInput+0x14c>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimeForKeyPress[i] == 0){
 80002aa:	4a10      	ldr	r2, [pc, #64]	; (80002ec <getKeyInput+0x14c>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d104      	bne.n	80002c0 <getKeyInput+0x120>
					keyReg3[i] = NORMAL_STATE;
 80002b6:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <getKeyInput+0x148>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2101      	movs	r1, #1
 80002bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 3; i++){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	f77f af6f 	ble.w	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	2000000c 	.word	0x2000000c
 80002dc:	20000000 	.word	0x20000000
 80002e0:	20000018 	.word	0x20000018
 80002e4:	40011000 	.word	0x40011000
 80002e8:	20000024 	.word	0x20000024
 80002ec:	20000030 	.word	0x20000030

080002f0 <fsm_automatic_run>:
 *      Author: Fung
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 80002f4:	4b92      	ldr	r3, [pc, #584]	; (8000540 <fsm_automatic_run+0x250>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d113      	bne.n	8000324 <fsm_automatic_run+0x34>
	setTimer3(10);
 80002fc:	200a      	movs	r0, #10
 80002fe:	f001 f843 	bl	8001388 <setTimer3>
	update7SEG(index_led);
 8000302:	4b90      	ldr	r3, [pc, #576]	; (8000544 <fsm_automatic_run+0x254>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fc68 	bl	8000bdc <update7SEG>
	index_led = (index_led + 1) % 4;
 800030c:	4b8d      	ldr	r3, [pc, #564]	; (8000544 <fsm_automatic_run+0x254>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	425a      	negs	r2, r3
 8000314:	f003 0303 	and.w	r3, r3, #3
 8000318:	f002 0203 	and.w	r2, r2, #3
 800031c:	bf58      	it	pl
 800031e:	4253      	negpl	r3, r2
 8000320:	4a88      	ldr	r2, [pc, #544]	; (8000544 <fsm_automatic_run+0x254>)
 8000322:	6013      	str	r3, [r2, #0]
	}
	switch(status){
 8000324:	4b88      	ldr	r3, [pc, #544]	; (8000548 <fsm_automatic_run+0x258>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	2b04      	cmp	r3, #4
 800032c:	f200 80fd 	bhi.w	800052a <fsm_automatic_run+0x23a>
 8000330:	a201      	add	r2, pc, #4	; (adr r2, 8000338 <fsm_automatic_run+0x48>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	0800034d 	.word	0x0800034d
 800033c:	08000375 	.word	0x08000375
 8000340:	080003e7 	.word	0x080003e7
 8000344:	08000451 	.word	0x08000451
 8000348:	080004c1 	.word	0x080004c1
		case INIT:
			duration_led_NS = red_duration;
 800034c:	4b7f      	ldr	r3, [pc, #508]	; (800054c <fsm_automatic_run+0x25c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a7f      	ldr	r2, [pc, #508]	; (8000550 <fsm_automatic_run+0x260>)
 8000352:	6013      	str	r3, [r2, #0]
			duration_led_EW = green_duration;
 8000354:	4b7f      	ldr	r3, [pc, #508]	; (8000554 <fsm_automatic_run+0x264>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a7f      	ldr	r2, [pc, #508]	; (8000558 <fsm_automatic_run+0x268>)
 800035a:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_NS_GREEN_EW;
 800035c:	4b7a      	ldr	r3, [pc, #488]	; (8000548 <fsm_automatic_run+0x258>)
 800035e:	2202      	movs	r2, #2
 8000360:	601a      	str	r2, [r3, #0]
			setTimer1(green_duration*100);
 8000362:	4b7c      	ldr	r3, [pc, #496]	; (8000554 <fsm_automatic_run+0x264>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2264      	movs	r2, #100	; 0x64
 8000368:	fb02 f303 	mul.w	r3, r2, r3
 800036c:	4618      	mov	r0, r3
 800036e:	f000 ffe3 	bl	8001338 <setTimer1>
			break;
 8000372:	e0e3      	b.n	800053c <fsm_automatic_run+0x24c>
		case AUTO_RED_NS_GREEN_EW:
			UpdateDisplayDownBuffer(duration_led_NS);
 8000374:	4b76      	ldr	r3, [pc, #472]	; (8000550 <fsm_automatic_run+0x260>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fcc5 	bl	8000d08 <UpdateDisplayDownBuffer>
			UpdateDisplayUpBuffer(duration_led_EW);
 800037e:	4b76      	ldr	r3, [pc, #472]	; (8000558 <fsm_automatic_run+0x268>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fce4 	bl	8000d50 <UpdateDisplayUpBuffer>
			onRed_NS();
 8000388:	f001 f930 	bl	80015ec <onRed_NS>
			onGreen_EW();
 800038c:	f001 f96a 	bl	8001664 <onGreen_EW>
			time();
 8000390:	f001 f974 	bl	800167c <time>
			if(timer1_flag == 1){
 8000394:	4b71      	ldr	r3, [pc, #452]	; (800055c <fsm_automatic_run+0x26c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d117      	bne.n	80003cc <fsm_automatic_run+0xdc>
				setTimer1(yellow_duration*100);
 800039c:	4b70      	ldr	r3, [pc, #448]	; (8000560 <fsm_automatic_run+0x270>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2264      	movs	r2, #100	; 0x64
 80003a2:	fb02 f303 	mul.w	r3, r2, r3
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 ffc6 	bl	8001338 <setTimer1>
				duration_led_NS = red_duration - green_duration;
 80003ac:	4b67      	ldr	r3, [pc, #412]	; (800054c <fsm_automatic_run+0x25c>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	4b68      	ldr	r3, [pc, #416]	; (8000554 <fsm_automatic_run+0x264>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	1ad3      	subs	r3, r2, r3
 80003b6:	4a66      	ldr	r2, [pc, #408]	; (8000550 <fsm_automatic_run+0x260>)
 80003b8:	6013      	str	r3, [r2, #0]
				duration_led_EW = yellow_duration;
 80003ba:	4b69      	ldr	r3, [pc, #420]	; (8000560 <fsm_automatic_run+0x270>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a66      	ldr	r2, [pc, #408]	; (8000558 <fsm_automatic_run+0x268>)
 80003c0:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_NS_YELLOW_EW;
 80003c2:	4b61      	ldr	r3, [pc, #388]	; (8000548 <fsm_automatic_run+0x258>)
 80003c4:	2203      	movs	r2, #3
 80003c6:	601a      	str	r2, [r3, #0]
				clear_traffic_light();
 80003c8:	f001 f8ea 	bl	80015a0 <clear_traffic_light>

			}
			if(isButtonPressed(0) == 1){
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff febd 	bl	800014c <isButtonPressed>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	f040 80aa 	bne.w	800052e <fsm_automatic_run+0x23e>
				clear_traffic_light();
 80003da:	f001 f8e1 	bl	80015a0 <clear_traffic_light>
				status = MAN_MODE;
 80003de:	4b5a      	ldr	r3, [pc, #360]	; (8000548 <fsm_automatic_run+0x258>)
 80003e0:	220b      	movs	r2, #11
 80003e2:	601a      	str	r2, [r3, #0]
			}
			break;
 80003e4:	e0a3      	b.n	800052e <fsm_automatic_run+0x23e>
		case AUTO_RED_NS_YELLOW_EW:
			UpdateDisplayDownBuffer(duration_led_NS);
 80003e6:	4b5a      	ldr	r3, [pc, #360]	; (8000550 <fsm_automatic_run+0x260>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fc8c 	bl	8000d08 <UpdateDisplayDownBuffer>
			UpdateDisplayUpBuffer(duration_led_EW);
 80003f0:	4b59      	ldr	r3, [pc, #356]	; (8000558 <fsm_automatic_run+0x268>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fcab 	bl	8000d50 <UpdateDisplayUpBuffer>
			onRed_NS();
 80003fa:	f001 f8f7 	bl	80015ec <onRed_NS>
			onYellow_EW();
 80003fe:	f001 f925 	bl	800164c <onYellow_EW>
			time();
 8000402:	f001 f93b 	bl	800167c <time>
			if(timer1_flag == 1){
 8000406:	4b55      	ldr	r3, [pc, #340]	; (800055c <fsm_automatic_run+0x26c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d114      	bne.n	8000438 <fsm_automatic_run+0x148>
				setTimer1(green_duration*100);
 800040e:	4b51      	ldr	r3, [pc, #324]	; (8000554 <fsm_automatic_run+0x264>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2264      	movs	r2, #100	; 0x64
 8000414:	fb02 f303 	mul.w	r3, r2, r3
 8000418:	4618      	mov	r0, r3
 800041a:	f000 ff8d 	bl	8001338 <setTimer1>
				duration_led_NS = green_duration;
 800041e:	4b4d      	ldr	r3, [pc, #308]	; (8000554 <fsm_automatic_run+0x264>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a4b      	ldr	r2, [pc, #300]	; (8000550 <fsm_automatic_run+0x260>)
 8000424:	6013      	str	r3, [r2, #0]
				duration_led_EW = red_duration;
 8000426:	4b49      	ldr	r3, [pc, #292]	; (800054c <fsm_automatic_run+0x25c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a4b      	ldr	r2, [pc, #300]	; (8000558 <fsm_automatic_run+0x268>)
 800042c:	6013      	str	r3, [r2, #0]
				clear_traffic_light();
 800042e:	f001 f8b7 	bl	80015a0 <clear_traffic_light>
				status = AUTO_GREEN_NS_RED_EW;
 8000432:	4b45      	ldr	r3, [pc, #276]	; (8000548 <fsm_automatic_run+0x258>)
 8000434:	2204      	movs	r2, #4
 8000436:	601a      	str	r2, [r3, #0]

			}
			if(isButtonPressed(0) == 1){
 8000438:	2000      	movs	r0, #0
 800043a:	f7ff fe87 	bl	800014c <isButtonPressed>
 800043e:	4603      	mov	r3, r0
 8000440:	2b01      	cmp	r3, #1
 8000442:	d176      	bne.n	8000532 <fsm_automatic_run+0x242>
				clear_traffic_light();
 8000444:	f001 f8ac 	bl	80015a0 <clear_traffic_light>
				status = MAN_MODE;
 8000448:	4b3f      	ldr	r3, [pc, #252]	; (8000548 <fsm_automatic_run+0x258>)
 800044a:	220b      	movs	r2, #11
 800044c:	601a      	str	r2, [r3, #0]
			}
			break;
 800044e:	e070      	b.n	8000532 <fsm_automatic_run+0x242>
		case AUTO_GREEN_NS_RED_EW:
			UpdateDisplayDownBuffer(duration_led_NS);
 8000450:	4b3f      	ldr	r3, [pc, #252]	; (8000550 <fsm_automatic_run+0x260>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	f000 fc57 	bl	8000d08 <UpdateDisplayDownBuffer>
			UpdateDisplayUpBuffer(duration_led_EW);
 800045a:	4b3f      	ldr	r3, [pc, #252]	; (8000558 <fsm_automatic_run+0x268>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fc76 	bl	8000d50 <UpdateDisplayUpBuffer>
			onGreen_NS();
 8000464:	f001 f8da 	bl	800161c <onGreen_NS>
			onRed_EW();
 8000468:	f001 f8e4 	bl	8001634 <onRed_EW>
			time();
 800046c:	f001 f906 	bl	800167c <time>
			if(timer1_flag == 1){
 8000470:	4b3a      	ldr	r3, [pc, #232]	; (800055c <fsm_automatic_run+0x26c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d117      	bne.n	80004a8 <fsm_automatic_run+0x1b8>
				setTimer1(yellow_duration*100);
 8000478:	4b39      	ldr	r3, [pc, #228]	; (8000560 <fsm_automatic_run+0x270>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2264      	movs	r2, #100	; 0x64
 800047e:	fb02 f303 	mul.w	r3, r2, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f000 ff58 	bl	8001338 <setTimer1>
				duration_led_NS = yellow_duration;
 8000488:	4b35      	ldr	r3, [pc, #212]	; (8000560 <fsm_automatic_run+0x270>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a30      	ldr	r2, [pc, #192]	; (8000550 <fsm_automatic_run+0x260>)
 800048e:	6013      	str	r3, [r2, #0]
				duration_led_EW = red_duration - green_duration;
 8000490:	4b2e      	ldr	r3, [pc, #184]	; (800054c <fsm_automatic_run+0x25c>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <fsm_automatic_run+0x264>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	4a2f      	ldr	r2, [pc, #188]	; (8000558 <fsm_automatic_run+0x268>)
 800049c:	6013      	str	r3, [r2, #0]
				clear_traffic_light();
 800049e:	f001 f87f 	bl	80015a0 <clear_traffic_light>
				status = AUTO_YELLOW_NS_RED_EW;
 80004a2:	4b29      	ldr	r3, [pc, #164]	; (8000548 <fsm_automatic_run+0x258>)
 80004a4:	2205      	movs	r2, #5
 80004a6:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0) == 1){
 80004a8:	2000      	movs	r0, #0
 80004aa:	f7ff fe4f 	bl	800014c <isButtonPressed>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d140      	bne.n	8000536 <fsm_automatic_run+0x246>
				clear_traffic_light();
 80004b4:	f001 f874 	bl	80015a0 <clear_traffic_light>
				status = MAN_MODE;
 80004b8:	4b23      	ldr	r3, [pc, #140]	; (8000548 <fsm_automatic_run+0x258>)
 80004ba:	220b      	movs	r2, #11
 80004bc:	601a      	str	r2, [r3, #0]
			}
			break;
 80004be:	e03a      	b.n	8000536 <fsm_automatic_run+0x246>
		case AUTO_YELLOW_NS_RED_EW:
			UpdateDisplayDownBuffer(duration_led_NS);
 80004c0:	4b23      	ldr	r3, [pc, #140]	; (8000550 <fsm_automatic_run+0x260>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 fc1f 	bl	8000d08 <UpdateDisplayDownBuffer>
			UpdateDisplayUpBuffer(duration_led_EW);
 80004ca:	4b23      	ldr	r3, [pc, #140]	; (8000558 <fsm_automatic_run+0x268>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 fc3e 	bl	8000d50 <UpdateDisplayUpBuffer>
			onYellow_NS();
 80004d4:	f001 f896 	bl	8001604 <onYellow_NS>
			onRed_EW();
 80004d8:	f001 f8ac 	bl	8001634 <onRed_EW>
			time();
 80004dc:	f001 f8ce 	bl	800167c <time>
			if(timer1_flag == 1){
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <fsm_automatic_run+0x26c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d114      	bne.n	8000512 <fsm_automatic_run+0x222>
				setTimer1(green_duration*100);
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <fsm_automatic_run+0x264>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2264      	movs	r2, #100	; 0x64
 80004ee:	fb02 f303 	mul.w	r3, r2, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 ff20 	bl	8001338 <setTimer1>
				duration_led_NS = red_duration;
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <fsm_automatic_run+0x25c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <fsm_automatic_run+0x260>)
 80004fe:	6013      	str	r3, [r2, #0]
				duration_led_EW = green_duration;
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <fsm_automatic_run+0x264>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a14      	ldr	r2, [pc, #80]	; (8000558 <fsm_automatic_run+0x268>)
 8000506:	6013      	str	r3, [r2, #0]
				clear_traffic_light();
 8000508:	f001 f84a 	bl	80015a0 <clear_traffic_light>
				status = AUTO_RED_NS_GREEN_EW;
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <fsm_automatic_run+0x258>)
 800050e:	2202      	movs	r2, #2
 8000510:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0) == 1){
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff fe1a 	bl	800014c <isButtonPressed>
 8000518:	4603      	mov	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	d10d      	bne.n	800053a <fsm_automatic_run+0x24a>
				clear_traffic_light();
 800051e:	f001 f83f 	bl	80015a0 <clear_traffic_light>
				status = MAN_MODE;
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <fsm_automatic_run+0x258>)
 8000524:	220b      	movs	r2, #11
 8000526:	601a      	str	r2, [r3, #0]
			}
			break;
 8000528:	e007      	b.n	800053a <fsm_automatic_run+0x24a>
		default:
			break;
 800052a:	bf00      	nop
 800052c:	e006      	b.n	800053c <fsm_automatic_run+0x24c>
			break;
 800052e:	bf00      	nop
 8000530:	e004      	b.n	800053c <fsm_automatic_run+0x24c>
			break;
 8000532:	bf00      	nop
 8000534:	e002      	b.n	800053c <fsm_automatic_run+0x24c>
			break;
 8000536:	bf00      	nop
 8000538:	e000      	b.n	800053c <fsm_automatic_run+0x24c>
			break;
 800053a:	bf00      	nop
	}
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000c8 	.word	0x200000c8
 8000544:	200000ac 	.word	0x200000ac
 8000548:	200000a8 	.word	0x200000a8
 800054c:	2000003c 	.word	0x2000003c
 8000550:	20000054 	.word	0x20000054
 8000554:	20000044 	.word	0x20000044
 8000558:	20000058 	.word	0x20000058
 800055c:	200000b8 	.word	0x200000b8
 8000560:	20000040 	.word	0x20000040

08000564 <fsm_manual_run>:
 */

#include "fsm_manual.h"

int first_access = 0;
void fsm_manual_run(){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	switch(status){
 8000568:	4b65      	ldr	r3, [pc, #404]	; (8000700 <fsm_manual_run+0x19c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3b0b      	subs	r3, #11
 800056e:	2b03      	cmp	r3, #3
 8000570:	f200 80bc 	bhi.w	80006ec <fsm_manual_run+0x188>
 8000574:	a201      	add	r2, pc, #4	; (adr r2, 800057c <fsm_manual_run+0x18>)
 8000576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800057a:	bf00      	nop
 800057c:	0800058d 	.word	0x0800058d
 8000580:	08000599 	.word	0x08000599
 8000584:	0800060b 	.word	0x0800060b
 8000588:	0800067f 	.word	0x0800067f
		case MAN_MODE:
			status = MAN_RED;
 800058c:	4b5c      	ldr	r3, [pc, #368]	; (8000700 <fsm_manual_run+0x19c>)
 800058e:	220c      	movs	r2, #12
 8000590:	601a      	str	r2, [r3, #0]
			setTimer2(25);
 8000592:	2019      	movs	r0, #25
 8000594:	f000 fee4 	bl	8001360 <setTimer2>
		case MAN_RED:
			mode_led = 1;
 8000598:	4b5a      	ldr	r3, [pc, #360]	; (8000704 <fsm_manual_run+0x1a0>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
			UpdateDisplayDownBuffer(mode_led);
 800059e:	4b59      	ldr	r3, [pc, #356]	; (8000704 <fsm_manual_run+0x1a0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fbb0 	bl	8000d08 <UpdateDisplayDownBuffer>
			if(first_access == 0){
 80005a8:	4b57      	ldr	r3, [pc, #348]	; (8000708 <fsm_manual_run+0x1a4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10b      	bne.n	80005c8 <fsm_manual_run+0x64>
				UpdateDisplayUpBuffer(red_duration);
 80005b0:	4b56      	ldr	r3, [pc, #344]	; (800070c <fsm_manual_run+0x1a8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fbcb 	bl	8000d50 <UpdateDisplayUpBuffer>
				first_access = 1;
 80005ba:	4b53      	ldr	r3, [pc, #332]	; (8000708 <fsm_manual_run+0x1a4>)
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
				temp_red = red_duration;
 80005c0:	4b52      	ldr	r3, [pc, #328]	; (800070c <fsm_manual_run+0x1a8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a52      	ldr	r2, [pc, #328]	; (8000710 <fsm_manual_run+0x1ac>)
 80005c6:	6013      	str	r3, [r2, #0]
			}
			if(timer2_flag == 1){
 80005c8:	4b52      	ldr	r3, [pc, #328]	; (8000714 <fsm_manual_run+0x1b0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d10a      	bne.n	80005e6 <fsm_manual_run+0x82>
				setTimer2(25);
 80005d0:	2019      	movs	r0, #25
 80005d2:	f000 fec5 	bl	8001360 <setTimer2>
				HAL_GPIO_TogglePin(RED_NS_GPIO_Port, RED_NS_Pin);
 80005d6:	2110      	movs	r1, #16
 80005d8:	484f      	ldr	r0, [pc, #316]	; (8000718 <fsm_manual_run+0x1b4>)
 80005da:	f001 fbaa 	bl	8001d32 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(RED_EW_GPIO_Port, RED_EW_Pin);
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	484d      	ldr	r0, [pc, #308]	; (8000718 <fsm_manual_run+0x1b4>)
 80005e2:	f001 fba6 	bl	8001d32 <HAL_GPIO_TogglePin>
			}
			if(isButtonPressed(0) == 1){
 80005e6:	2000      	movs	r0, #0
 80005e8:	f7ff fdb0 	bl	800014c <isButtonPressed>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d17e      	bne.n	80006f0 <fsm_manual_run+0x18c>
				clear_traffic_light();
 80005f2:	f000 ffd5 	bl	80015a0 <clear_traffic_light>
				setTimer2(25);
 80005f6:	2019      	movs	r0, #25
 80005f8:	f000 feb2 	bl	8001360 <setTimer2>
				first_access = 0;
 80005fc:	4b42      	ldr	r3, [pc, #264]	; (8000708 <fsm_manual_run+0x1a4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
				status = MAN_YELLOW;
 8000602:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <fsm_manual_run+0x19c>)
 8000604:	220d      	movs	r2, #13
 8000606:	601a      	str	r2, [r3, #0]
			}
			break;
 8000608:	e072      	b.n	80006f0 <fsm_manual_run+0x18c>
		case MAN_YELLOW:
			mode_led = 2;
 800060a:	4b3e      	ldr	r3, [pc, #248]	; (8000704 <fsm_manual_run+0x1a0>)
 800060c:	2202      	movs	r2, #2
 800060e:	601a      	str	r2, [r3, #0]
			UpdateDisplayDownBuffer(mode_led);
 8000610:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <fsm_manual_run+0x1a0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fb77 	bl	8000d08 <UpdateDisplayDownBuffer>
			if(first_access == 0){
 800061a:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <fsm_manual_run+0x1a4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d10b      	bne.n	800063a <fsm_manual_run+0xd6>
				UpdateDisplayUpBuffer(yellow_duration);
 8000622:	4b3e      	ldr	r3, [pc, #248]	; (800071c <fsm_manual_run+0x1b8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fb92 	bl	8000d50 <UpdateDisplayUpBuffer>
				first_access = 1;
 800062c:	4b36      	ldr	r3, [pc, #216]	; (8000708 <fsm_manual_run+0x1a4>)
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]
				temp_yellow = yellow_duration;
 8000632:	4b3a      	ldr	r3, [pc, #232]	; (800071c <fsm_manual_run+0x1b8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a3a      	ldr	r2, [pc, #232]	; (8000720 <fsm_manual_run+0x1bc>)
 8000638:	6013      	str	r3, [r2, #0]
			}
			if(timer2_flag == 1){
 800063a:	4b36      	ldr	r3, [pc, #216]	; (8000714 <fsm_manual_run+0x1b0>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d10b      	bne.n	800065a <fsm_manual_run+0xf6>
				setTimer2(25);
 8000642:	2019      	movs	r0, #25
 8000644:	f000 fe8c 	bl	8001360 <setTimer2>
				HAL_GPIO_TogglePin(YELLOW_NS_GPIO_Port, YELLOW_NS_Pin);
 8000648:	2120      	movs	r1, #32
 800064a:	4833      	ldr	r0, [pc, #204]	; (8000718 <fsm_manual_run+0x1b4>)
 800064c:	f001 fb71 	bl	8001d32 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(YELLOW_EW_GPIO_Port, YELLOW_EW_Pin);
 8000650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000654:	4830      	ldr	r0, [pc, #192]	; (8000718 <fsm_manual_run+0x1b4>)
 8000656:	f001 fb6c 	bl	8001d32 <HAL_GPIO_TogglePin>
			}
			if(isButtonPressed(0) == 1){
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff fd76 	bl	800014c <isButtonPressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d146      	bne.n	80006f4 <fsm_manual_run+0x190>
				clear_traffic_light();
 8000666:	f000 ff9b 	bl	80015a0 <clear_traffic_light>
				setTimer2(25);
 800066a:	2019      	movs	r0, #25
 800066c:	f000 fe78 	bl	8001360 <setTimer2>
				first_access = 0;
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <fsm_manual_run+0x1a4>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
				status = MAN_GREEN;
 8000676:	4b22      	ldr	r3, [pc, #136]	; (8000700 <fsm_manual_run+0x19c>)
 8000678:	220e      	movs	r2, #14
 800067a:	601a      	str	r2, [r3, #0]
			}
			break;
 800067c:	e03a      	b.n	80006f4 <fsm_manual_run+0x190>
		case MAN_GREEN:
			mode_led = 3;
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <fsm_manual_run+0x1a0>)
 8000680:	2203      	movs	r2, #3
 8000682:	601a      	str	r2, [r3, #0]
			UpdateDisplayDownBuffer(mode_led);
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <fsm_manual_run+0x1a0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fb3d 	bl	8000d08 <UpdateDisplayDownBuffer>
			if(first_access == 0){
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <fsm_manual_run+0x1a4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d10b      	bne.n	80006ae <fsm_manual_run+0x14a>
				UpdateDisplayUpBuffer(green_duration);
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <fsm_manual_run+0x1c0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fb58 	bl	8000d50 <UpdateDisplayUpBuffer>
				first_access = 1;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <fsm_manual_run+0x1a4>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
				temp_green = green_duration;
 80006a6:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <fsm_manual_run+0x1c0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a1f      	ldr	r2, [pc, #124]	; (8000728 <fsm_manual_run+0x1c4>)
 80006ac:	6013      	str	r3, [r2, #0]
			}
			if(timer2_flag == 1){
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <fsm_manual_run+0x1b0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d10b      	bne.n	80006ce <fsm_manual_run+0x16a>
				setTimer2(25);
 80006b6:	2019      	movs	r0, #25
 80006b8:	f000 fe52 	bl	8001360 <setTimer2>
				HAL_GPIO_TogglePin(GREEN_NS_GPIO_Port, GREEN_NS_Pin);
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4816      	ldr	r0, [pc, #88]	; (8000718 <fsm_manual_run+0x1b4>)
 80006c0:	f001 fb37 	bl	8001d32 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GREEN_EW_GPIO_Port, GREEN_EW_Pin);
 80006c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c8:	4813      	ldr	r0, [pc, #76]	; (8000718 <fsm_manual_run+0x1b4>)
 80006ca:	f001 fb32 	bl	8001d32 <HAL_GPIO_TogglePin>
			}
			if(isButtonPressed(0) == 1){
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff fd3c 	bl	800014c <isButtonPressed>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d10e      	bne.n	80006f8 <fsm_manual_run+0x194>
				clear_traffic_light();
 80006da:	f000 ff61 	bl	80015a0 <clear_traffic_light>
				first_access = 0;
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <fsm_manual_run+0x1a4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
				status = INIT;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <fsm_manual_run+0x19c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
			}
			break;
 80006ea:	e005      	b.n	80006f8 <fsm_manual_run+0x194>
		default:
			break;
 80006ec:	bf00      	nop
 80006ee:	e004      	b.n	80006fa <fsm_manual_run+0x196>
			break;
 80006f0:	bf00      	nop
 80006f2:	e002      	b.n	80006fa <fsm_manual_run+0x196>
			break;
 80006f4:	bf00      	nop
 80006f6:	e000      	b.n	80006fa <fsm_manual_run+0x196>
			break;
 80006f8:	bf00      	nop
	}
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000a8 	.word	0x200000a8
 8000704:	2000005c 	.word	0x2000005c
 8000708:	200000a4 	.word	0x200000a4
 800070c:	2000003c 	.word	0x2000003c
 8000710:	20000048 	.word	0x20000048
 8000714:	200000c0 	.word	0x200000c0
 8000718:	40010800 	.word	0x40010800
 800071c:	20000040 	.word	0x20000040
 8000720:	2000004c 	.word	0x2000004c
 8000724:	20000044 	.word	0x20000044
 8000728:	20000050 	.word	0x20000050

0800072c <fsm_setting_run>:
 */

#include "fsm_setting.h"


void fsm_setting_run(){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	switch(status){
 8000730:	4b5a      	ldr	r3, [pc, #360]	; (800089c <fsm_setting_run+0x170>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b0e      	cmp	r3, #14
 8000736:	d074      	beq.n	8000822 <fsm_setting_run+0xf6>
 8000738:	2b0e      	cmp	r3, #14
 800073a:	f300 80a6 	bgt.w	800088a <fsm_setting_run+0x15e>
 800073e:	2b0c      	cmp	r3, #12
 8000740:	d002      	beq.n	8000748 <fsm_setting_run+0x1c>
 8000742:	2b0d      	cmp	r3, #13
 8000744:	d034      	beq.n	80007b0 <fsm_setting_run+0x84>
			red_duration = green_duration + yellow_duration;
			UpdateDisplayUpBuffer(green_duration);
		}
		break;
	default:
		break;
 8000746:	e0a0      	b.n	800088a <fsm_setting_run+0x15e>
		UpdateDisplayDownBuffer(mode_led);
 8000748:	4b55      	ldr	r3, [pc, #340]	; (80008a0 <fsm_setting_run+0x174>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fadb 	bl	8000d08 <UpdateDisplayDownBuffer>
		if(isButtonPressed(1) == 1){
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff fcfa 	bl	800014c <isButtonPressed>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d111      	bne.n	8000782 <fsm_setting_run+0x56>
			temp_red++;
 800075e:	4b51      	ldr	r3, [pc, #324]	; (80008a4 <fsm_setting_run+0x178>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	4a4f      	ldr	r2, [pc, #316]	; (80008a4 <fsm_setting_run+0x178>)
 8000766:	6013      	str	r3, [r2, #0]
			if(temp_red >= 100){
 8000768:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <fsm_setting_run+0x178>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b63      	cmp	r3, #99	; 0x63
 800076e:	dd03      	ble.n	8000778 <fsm_setting_run+0x4c>
				temp_red = red_duration;
 8000770:	4b4d      	ldr	r3, [pc, #308]	; (80008a8 <fsm_setting_run+0x17c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a4b      	ldr	r2, [pc, #300]	; (80008a4 <fsm_setting_run+0x178>)
 8000776:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(temp_red);
 8000778:	4b4a      	ldr	r3, [pc, #296]	; (80008a4 <fsm_setting_run+0x178>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fae7 	bl	8000d50 <UpdateDisplayUpBuffer>
		if(isButtonPressed(2) == 1){
 8000782:	2002      	movs	r0, #2
 8000784:	f7ff fce2 	bl	800014c <isButtonPressed>
 8000788:	4603      	mov	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	d17f      	bne.n	800088e <fsm_setting_run+0x162>
			red_duration = temp_red;
 800078e:	4b45      	ldr	r3, [pc, #276]	; (80008a4 <fsm_setting_run+0x178>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a45      	ldr	r2, [pc, #276]	; (80008a8 <fsm_setting_run+0x17c>)
 8000794:	6013      	str	r3, [r2, #0]
			green_duration = red_duration - yellow_duration;
 8000796:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <fsm_setting_run+0x17c>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b44      	ldr	r3, [pc, #272]	; (80008ac <fsm_setting_run+0x180>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	4a43      	ldr	r2, [pc, #268]	; (80008b0 <fsm_setting_run+0x184>)
 80007a2:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(red_duration);
 80007a4:	4b40      	ldr	r3, [pc, #256]	; (80008a8 <fsm_setting_run+0x17c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fad1 	bl	8000d50 <UpdateDisplayUpBuffer>
		break;
 80007ae:	e06e      	b.n	800088e <fsm_setting_run+0x162>
		UpdateDisplayDownBuffer(mode_led);
 80007b0:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <fsm_setting_run+0x174>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 faa7 	bl	8000d08 <UpdateDisplayDownBuffer>
		if(isButtonPressed(1) == 1){
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fcc6 	bl	800014c <isButtonPressed>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d111      	bne.n	80007ea <fsm_setting_run+0xbe>
			temp_yellow++;
 80007c6:	4b3b      	ldr	r3, [pc, #236]	; (80008b4 <fsm_setting_run+0x188>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	4a39      	ldr	r2, [pc, #228]	; (80008b4 <fsm_setting_run+0x188>)
 80007ce:	6013      	str	r3, [r2, #0]
			if(temp_yellow >= 100){
 80007d0:	4b38      	ldr	r3, [pc, #224]	; (80008b4 <fsm_setting_run+0x188>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b63      	cmp	r3, #99	; 0x63
 80007d6:	dd03      	ble.n	80007e0 <fsm_setting_run+0xb4>
				temp_yellow = yellow_duration;
 80007d8:	4b34      	ldr	r3, [pc, #208]	; (80008ac <fsm_setting_run+0x180>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a35      	ldr	r2, [pc, #212]	; (80008b4 <fsm_setting_run+0x188>)
 80007de:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(temp_yellow);
 80007e0:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <fsm_setting_run+0x188>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fab3 	bl	8000d50 <UpdateDisplayUpBuffer>
		if(isButtonPressed(2) == 1){
 80007ea:	2002      	movs	r0, #2
 80007ec:	f7ff fcae 	bl	800014c <isButtonPressed>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d14d      	bne.n	8000892 <fsm_setting_run+0x166>
			UpdateDisplayUpBuffer(temp_yellow);
 80007f6:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <fsm_setting_run+0x188>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 faa8 	bl	8000d50 <UpdateDisplayUpBuffer>
			yellow_duration = temp_yellow;
 8000800:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <fsm_setting_run+0x188>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a29      	ldr	r2, [pc, #164]	; (80008ac <fsm_setting_run+0x180>)
 8000806:	6013      	str	r3, [r2, #0]
			red_duration = yellow_duration + green_duration;
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <fsm_setting_run+0x180>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <fsm_setting_run+0x184>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4413      	add	r3, r2
 8000812:	4a25      	ldr	r2, [pc, #148]	; (80008a8 <fsm_setting_run+0x17c>)
 8000814:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(yellow_duration);
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <fsm_setting_run+0x180>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fa98 	bl	8000d50 <UpdateDisplayUpBuffer>
		break;
 8000820:	e037      	b.n	8000892 <fsm_setting_run+0x166>
		UpdateDisplayDownBuffer(mode_led);
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <fsm_setting_run+0x174>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fa6e 	bl	8000d08 <UpdateDisplayDownBuffer>
		if(isButtonPressed(1) == 1){
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fc8d 	bl	800014c <isButtonPressed>
 8000832:	4603      	mov	r3, r0
 8000834:	2b01      	cmp	r3, #1
 8000836:	d111      	bne.n	800085c <fsm_setting_run+0x130>
			temp_green++;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <fsm_setting_run+0x18c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <fsm_setting_run+0x18c>)
 8000840:	6013      	str	r3, [r2, #0]
			if(temp_green >= 100){
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <fsm_setting_run+0x18c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b63      	cmp	r3, #99	; 0x63
 8000848:	dd03      	ble.n	8000852 <fsm_setting_run+0x126>
			temp_green = green_duration;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <fsm_setting_run+0x184>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a1a      	ldr	r2, [pc, #104]	; (80008b8 <fsm_setting_run+0x18c>)
 8000850:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(temp_green);
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <fsm_setting_run+0x18c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fa7a 	bl	8000d50 <UpdateDisplayUpBuffer>
		if(isButtonPressed(2) == 1){
 800085c:	2002      	movs	r0, #2
 800085e:	f7ff fc75 	bl	800014c <isButtonPressed>
 8000862:	4603      	mov	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	d116      	bne.n	8000896 <fsm_setting_run+0x16a>
			green_duration = temp_green;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <fsm_setting_run+0x18c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <fsm_setting_run+0x184>)
 800086e:	6013      	str	r3, [r2, #0]
			red_duration = green_duration + yellow_duration;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <fsm_setting_run+0x184>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <fsm_setting_run+0x180>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4413      	add	r3, r2
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <fsm_setting_run+0x17c>)
 800087c:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(green_duration);
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <fsm_setting_run+0x184>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fa64 	bl	8000d50 <UpdateDisplayUpBuffer>
		break;
 8000888:	e005      	b.n	8000896 <fsm_setting_run+0x16a>
		break;
 800088a:	bf00      	nop
 800088c:	e004      	b.n	8000898 <fsm_setting_run+0x16c>
		break;
 800088e:	bf00      	nop
 8000890:	e002      	b.n	8000898 <fsm_setting_run+0x16c>
		break;
 8000892:	bf00      	nop
 8000894:	e000      	b.n	8000898 <fsm_setting_run+0x16c>
		break;
 8000896:	bf00      	nop
	}
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000a8 	.word	0x200000a8
 80008a0:	2000005c 	.word	0x2000005c
 80008a4:	20000048 	.word	0x20000048
 80008a8:	2000003c 	.word	0x2000003c
 80008ac:	20000040 	.word	0x20000040
 80008b0:	20000044 	.word	0x20000044
 80008b4:	2000004c 	.word	0x2000004c
 80008b8:	20000050 	.word	0x20000050

080008bc <display7SEG>:
 *  Created on: Oct 28, 2024
 *      Author: Fung
 */

#include "led7_segment.h"
void display7SEG(int num){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b09      	cmp	r3, #9
 80008c8:	f200 8180 	bhi.w	8000bcc <display7SEG+0x310>
 80008cc:	a201      	add	r2, pc, #4	; (adr r2, 80008d4 <display7SEG+0x18>)
 80008ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d2:	bf00      	nop
 80008d4:	080008fd 	.word	0x080008fd
 80008d8:	08000945 	.word	0x08000945
 80008dc:	0800098d 	.word	0x0800098d
 80008e0:	080009d5 	.word	0x080009d5
 80008e4:	08000a1d 	.word	0x08000a1d
 80008e8:	08000a65 	.word	0x08000a65
 80008ec:	08000aad 	.word	0x08000aad
 80008f0:	08000af5 	.word	0x08000af5
 80008f4:	08000b3d 	.word	0x08000b3d
 80008f8:	08000b85 	.word	0x08000b85
	 switch (num)
			  {
			  case 0:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2101      	movs	r1, #1
 8000900:	48b5      	ldr	r0, [pc, #724]	; (8000bd8 <display7SEG+0x31c>)
 8000902:	f001 f9fe 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2102      	movs	r1, #2
 800090a:	48b3      	ldr	r0, [pc, #716]	; (8000bd8 <display7SEG+0x31c>)
 800090c:	f001 f9f9 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2104      	movs	r1, #4
 8000914:	48b0      	ldr	r0, [pc, #704]	; (8000bd8 <display7SEG+0x31c>)
 8000916:	f001 f9f4 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2108      	movs	r1, #8
 800091e:	48ae      	ldr	r0, [pc, #696]	; (8000bd8 <display7SEG+0x31c>)
 8000920:	f001 f9ef 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2110      	movs	r1, #16
 8000928:	48ab      	ldr	r0, [pc, #684]	; (8000bd8 <display7SEG+0x31c>)
 800092a:	f001 f9ea 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	48a9      	ldr	r0, [pc, #676]	; (8000bd8 <display7SEG+0x31c>)
 8000934:	f001 f9e5 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2140      	movs	r1, #64	; 0x40
 800093c:	48a6      	ldr	r0, [pc, #664]	; (8000bd8 <display7SEG+0x31c>)
 800093e:	f001 f9e0 	bl	8001d02 <HAL_GPIO_WritePin>
				  break;
 8000942:	e144      	b.n	8000bce <display7SEG+0x312>
			  case 1:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2101      	movs	r1, #1
 8000948:	48a3      	ldr	r0, [pc, #652]	; (8000bd8 <display7SEG+0x31c>)
 800094a:	f001 f9da 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2102      	movs	r1, #2
 8000952:	48a1      	ldr	r0, [pc, #644]	; (8000bd8 <display7SEG+0x31c>)
 8000954:	f001 f9d5 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2104      	movs	r1, #4
 800095c:	489e      	ldr	r0, [pc, #632]	; (8000bd8 <display7SEG+0x31c>)
 800095e:	f001 f9d0 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2108      	movs	r1, #8
 8000966:	489c      	ldr	r0, [pc, #624]	; (8000bd8 <display7SEG+0x31c>)
 8000968:	f001 f9cb 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2110      	movs	r1, #16
 8000970:	4899      	ldr	r0, [pc, #612]	; (8000bd8 <display7SEG+0x31c>)
 8000972:	f001 f9c6 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000976:	2201      	movs	r2, #1
 8000978:	2120      	movs	r1, #32
 800097a:	4897      	ldr	r0, [pc, #604]	; (8000bd8 <display7SEG+0x31c>)
 800097c:	f001 f9c1 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2140      	movs	r1, #64	; 0x40
 8000984:	4894      	ldr	r0, [pc, #592]	; (8000bd8 <display7SEG+0x31c>)
 8000986:	f001 f9bc 	bl	8001d02 <HAL_GPIO_WritePin>
				  break;
 800098a:	e120      	b.n	8000bce <display7SEG+0x312>
			  case 2:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2101      	movs	r1, #1
 8000990:	4891      	ldr	r0, [pc, #580]	; (8000bd8 <display7SEG+0x31c>)
 8000992:	f001 f9b6 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2102      	movs	r1, #2
 800099a:	488f      	ldr	r0, [pc, #572]	; (8000bd8 <display7SEG+0x31c>)
 800099c:	f001 f9b1 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2104      	movs	r1, #4
 80009a4:	488c      	ldr	r0, [pc, #560]	; (8000bd8 <display7SEG+0x31c>)
 80009a6:	f001 f9ac 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2108      	movs	r1, #8
 80009ae:	488a      	ldr	r0, [pc, #552]	; (8000bd8 <display7SEG+0x31c>)
 80009b0:	f001 f9a7 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2110      	movs	r1, #16
 80009b8:	4887      	ldr	r0, [pc, #540]	; (8000bd8 <display7SEG+0x31c>)
 80009ba:	f001 f9a2 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2120      	movs	r1, #32
 80009c2:	4885      	ldr	r0, [pc, #532]	; (8000bd8 <display7SEG+0x31c>)
 80009c4:	f001 f99d 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	4882      	ldr	r0, [pc, #520]	; (8000bd8 <display7SEG+0x31c>)
 80009ce:	f001 f998 	bl	8001d02 <HAL_GPIO_WritePin>
				  break;
 80009d2:	e0fc      	b.n	8000bce <display7SEG+0x312>
			  case 3:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2101      	movs	r1, #1
 80009d8:	487f      	ldr	r0, [pc, #508]	; (8000bd8 <display7SEG+0x31c>)
 80009da:	f001 f992 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2102      	movs	r1, #2
 80009e2:	487d      	ldr	r0, [pc, #500]	; (8000bd8 <display7SEG+0x31c>)
 80009e4:	f001 f98d 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2104      	movs	r1, #4
 80009ec:	487a      	ldr	r0, [pc, #488]	; (8000bd8 <display7SEG+0x31c>)
 80009ee:	f001 f988 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2108      	movs	r1, #8
 80009f6:	4878      	ldr	r0, [pc, #480]	; (8000bd8 <display7SEG+0x31c>)
 80009f8:	f001 f983 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2110      	movs	r1, #16
 8000a00:	4875      	ldr	r0, [pc, #468]	; (8000bd8 <display7SEG+0x31c>)
 8000a02:	f001 f97e 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2120      	movs	r1, #32
 8000a0a:	4873      	ldr	r0, [pc, #460]	; (8000bd8 <display7SEG+0x31c>)
 8000a0c:	f001 f979 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2140      	movs	r1, #64	; 0x40
 8000a14:	4870      	ldr	r0, [pc, #448]	; (8000bd8 <display7SEG+0x31c>)
 8000a16:	f001 f974 	bl	8001d02 <HAL_GPIO_WritePin>
				  break;
 8000a1a:	e0d8      	b.n	8000bce <display7SEG+0x312>
			  case 4:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2101      	movs	r1, #1
 8000a20:	486d      	ldr	r0, [pc, #436]	; (8000bd8 <display7SEG+0x31c>)
 8000a22:	f001 f96e 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2102      	movs	r1, #2
 8000a2a:	486b      	ldr	r0, [pc, #428]	; (8000bd8 <display7SEG+0x31c>)
 8000a2c:	f001 f969 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2104      	movs	r1, #4
 8000a34:	4868      	ldr	r0, [pc, #416]	; (8000bd8 <display7SEG+0x31c>)
 8000a36:	f001 f964 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	4866      	ldr	r0, [pc, #408]	; (8000bd8 <display7SEG+0x31c>)
 8000a40:	f001 f95f 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2110      	movs	r1, #16
 8000a48:	4863      	ldr	r0, [pc, #396]	; (8000bd8 <display7SEG+0x31c>)
 8000a4a:	f001 f95a 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2120      	movs	r1, #32
 8000a52:	4861      	ldr	r0, [pc, #388]	; (8000bd8 <display7SEG+0x31c>)
 8000a54:	f001 f955 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	485e      	ldr	r0, [pc, #376]	; (8000bd8 <display7SEG+0x31c>)
 8000a5e:	f001 f950 	bl	8001d02 <HAL_GPIO_WritePin>
				  break;
 8000a62:	e0b4      	b.n	8000bce <display7SEG+0x312>
			  case 5:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2101      	movs	r1, #1
 8000a68:	485b      	ldr	r0, [pc, #364]	; (8000bd8 <display7SEG+0x31c>)
 8000a6a:	f001 f94a 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2102      	movs	r1, #2
 8000a72:	4859      	ldr	r0, [pc, #356]	; (8000bd8 <display7SEG+0x31c>)
 8000a74:	f001 f945 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	4856      	ldr	r0, [pc, #344]	; (8000bd8 <display7SEG+0x31c>)
 8000a7e:	f001 f940 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2108      	movs	r1, #8
 8000a86:	4854      	ldr	r0, [pc, #336]	; (8000bd8 <display7SEG+0x31c>)
 8000a88:	f001 f93b 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2110      	movs	r1, #16
 8000a90:	4851      	ldr	r0, [pc, #324]	; (8000bd8 <display7SEG+0x31c>)
 8000a92:	f001 f936 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2120      	movs	r1, #32
 8000a9a:	484f      	ldr	r0, [pc, #316]	; (8000bd8 <display7SEG+0x31c>)
 8000a9c:	f001 f931 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	484c      	ldr	r0, [pc, #304]	; (8000bd8 <display7SEG+0x31c>)
 8000aa6:	f001 f92c 	bl	8001d02 <HAL_GPIO_WritePin>
				  break;
 8000aaa:	e090      	b.n	8000bce <display7SEG+0x312>
			  case 6:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4849      	ldr	r0, [pc, #292]	; (8000bd8 <display7SEG+0x31c>)
 8000ab2:	f001 f926 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4847      	ldr	r0, [pc, #284]	; (8000bd8 <display7SEG+0x31c>)
 8000abc:	f001 f921 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	4844      	ldr	r0, [pc, #272]	; (8000bd8 <display7SEG+0x31c>)
 8000ac6:	f001 f91c 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2108      	movs	r1, #8
 8000ace:	4842      	ldr	r0, [pc, #264]	; (8000bd8 <display7SEG+0x31c>)
 8000ad0:	f001 f917 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	483f      	ldr	r0, [pc, #252]	; (8000bd8 <display7SEG+0x31c>)
 8000ada:	f001 f912 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	483d      	ldr	r0, [pc, #244]	; (8000bd8 <display7SEG+0x31c>)
 8000ae4:	f001 f90d 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2140      	movs	r1, #64	; 0x40
 8000aec:	483a      	ldr	r0, [pc, #232]	; (8000bd8 <display7SEG+0x31c>)
 8000aee:	f001 f908 	bl	8001d02 <HAL_GPIO_WritePin>
				  break;
 8000af2:	e06c      	b.n	8000bce <display7SEG+0x312>
			  case 7:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2101      	movs	r1, #1
 8000af8:	4837      	ldr	r0, [pc, #220]	; (8000bd8 <display7SEG+0x31c>)
 8000afa:	f001 f902 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2102      	movs	r1, #2
 8000b02:	4835      	ldr	r0, [pc, #212]	; (8000bd8 <display7SEG+0x31c>)
 8000b04:	f001 f8fd 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	4832      	ldr	r0, [pc, #200]	; (8000bd8 <display7SEG+0x31c>)
 8000b0e:	f001 f8f8 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2108      	movs	r1, #8
 8000b16:	4830      	ldr	r0, [pc, #192]	; (8000bd8 <display7SEG+0x31c>)
 8000b18:	f001 f8f3 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2110      	movs	r1, #16
 8000b20:	482d      	ldr	r0, [pc, #180]	; (8000bd8 <display7SEG+0x31c>)
 8000b22:	f001 f8ee 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2120      	movs	r1, #32
 8000b2a:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <display7SEG+0x31c>)
 8000b2c:	f001 f8e9 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2140      	movs	r1, #64	; 0x40
 8000b34:	4828      	ldr	r0, [pc, #160]	; (8000bd8 <display7SEG+0x31c>)
 8000b36:	f001 f8e4 	bl	8001d02 <HAL_GPIO_WritePin>
				  break;
 8000b3a:	e048      	b.n	8000bce <display7SEG+0x312>
			  case 8:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4825      	ldr	r0, [pc, #148]	; (8000bd8 <display7SEG+0x31c>)
 8000b42:	f001 f8de 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4823      	ldr	r0, [pc, #140]	; (8000bd8 <display7SEG+0x31c>)
 8000b4c:	f001 f8d9 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2104      	movs	r1, #4
 8000b54:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <display7SEG+0x31c>)
 8000b56:	f001 f8d4 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2108      	movs	r1, #8
 8000b5e:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <display7SEG+0x31c>)
 8000b60:	f001 f8cf 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2110      	movs	r1, #16
 8000b68:	481b      	ldr	r0, [pc, #108]	; (8000bd8 <display7SEG+0x31c>)
 8000b6a:	f001 f8ca 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2120      	movs	r1, #32
 8000b72:	4819      	ldr	r0, [pc, #100]	; (8000bd8 <display7SEG+0x31c>)
 8000b74:	f001 f8c5 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2140      	movs	r1, #64	; 0x40
 8000b7c:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <display7SEG+0x31c>)
 8000b7e:	f001 f8c0 	bl	8001d02 <HAL_GPIO_WritePin>
				  break;
 8000b82:	e024      	b.n	8000bce <display7SEG+0x312>
			  case 9:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2101      	movs	r1, #1
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <display7SEG+0x31c>)
 8000b8a:	f001 f8ba 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2102      	movs	r1, #2
 8000b92:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <display7SEG+0x31c>)
 8000b94:	f001 f8b5 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <display7SEG+0x31c>)
 8000b9e:	f001 f8b0 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <display7SEG+0x31c>)
 8000ba8:	f001 f8ab 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2110      	movs	r1, #16
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <display7SEG+0x31c>)
 8000bb2:	f001 f8a6 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2120      	movs	r1, #32
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <display7SEG+0x31c>)
 8000bbc:	f001 f8a1 	bl	8001d02 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2140      	movs	r1, #64	; 0x40
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <display7SEG+0x31c>)
 8000bc6:	f001 f89c 	bl	8001d02 <HAL_GPIO_WritePin>
				  break;
 8000bca:	e000      	b.n	8000bce <display7SEG+0x312>
			  default:
				  break;
 8000bcc:	bf00      	nop
			  }
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <update7SEG>:


void update7SEG (int index){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	f200 8084 	bhi.w	8000cf4 <update7SEG+0x118>
 8000bec:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <update7SEG+0x18>)
 8000bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf2:	bf00      	nop
 8000bf4:	08000c05 	.word	0x08000c05
 8000bf8:	08000c41 	.word	0x08000c41
 8000bfc:	08000c7d 	.word	0x08000c7d
 8000c00:	08000cb9 	.word	0x08000cb9
	switch (index){
		case 0:
			HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0a:	483d      	ldr	r0, [pc, #244]	; (8000d00 <update7SEG+0x124>)
 8000c0c:	f001 f879 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c16:	483a      	ldr	r0, [pc, #232]	; (8000d00 <update7SEG+0x124>)
 8000c18:	f001 f873 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c22:	4837      	ldr	r0, [pc, #220]	; (8000d00 <update7SEG+0x124>)
 8000c24:	f001 f86d 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2e:	4834      	ldr	r0, [pc, #208]	; (8000d00 <update7SEG+0x124>)
 8000c30:	f001 f867 	bl	8001d02 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000c34:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <update7SEG+0x128>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fe3f 	bl	80008bc <display7SEG>
			break;
 8000c3e:	e05a      	b.n	8000cf6 <update7SEG+0x11a>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c46:	482e      	ldr	r0, [pc, #184]	; (8000d00 <update7SEG+0x124>)
 8000c48:	f001 f85b 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c52:	482b      	ldr	r0, [pc, #172]	; (8000d00 <update7SEG+0x124>)
 8000c54:	f001 f855 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5e:	4828      	ldr	r0, [pc, #160]	; (8000d00 <update7SEG+0x124>)
 8000c60:	f001 f84f 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6a:	4825      	ldr	r0, [pc, #148]	; (8000d00 <update7SEG+0x124>)
 8000c6c:	f001 f849 	bl	8001d02 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <update7SEG+0x128>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fe21 	bl	80008bc <display7SEG>
			break;
 8000c7a:	e03c      	b.n	8000cf6 <update7SEG+0x11a>
		case 2:
			HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c82:	481f      	ldr	r0, [pc, #124]	; (8000d00 <update7SEG+0x124>)
 8000c84:	f001 f83d 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c8e:	481c      	ldr	r0, [pc, #112]	; (8000d00 <update7SEG+0x124>)
 8000c90:	f001 f837 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c9a:	4819      	ldr	r0, [pc, #100]	; (8000d00 <update7SEG+0x124>)
 8000c9c:	f001 f831 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca6:	4816      	ldr	r0, [pc, #88]	; (8000d00 <update7SEG+0x124>)
 8000ca8:	f001 f82b 	bl	8001d02 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <update7SEG+0x128>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fe03 	bl	80008bc <display7SEG>
			break;
 8000cb6:	e01e      	b.n	8000cf6 <update7SEG+0x11a>
		case 3:
			HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cbe:	4810      	ldr	r0, [pc, #64]	; (8000d00 <update7SEG+0x124>)
 8000cc0:	f001 f81f 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <update7SEG+0x124>)
 8000ccc:	f001 f819 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <update7SEG+0x124>)
 8000cd8:	f001 f813 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce2:	4807      	ldr	r0, [pc, #28]	; (8000d00 <update7SEG+0x124>)
 8000ce4:	f001 f80d 	bl	8001d02 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <update7SEG+0x128>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fde5 	bl	80008bc <display7SEG>
			break;
 8000cf2:	e000      	b.n	8000cf6 <update7SEG+0x11a>
		default :
			break;
 8000cf4:	bf00      	nop
	}
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40010800 	.word	0x40010800
 8000d04:	20000060 	.word	0x20000060

08000d08 <UpdateDisplayDownBuffer>:
 void UpdateDisplayDownBuffer(int display1){
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	 led_buffer[0] = display1 / 10;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <UpdateDisplayDownBuffer+0x40>)
 8000d14:	fb82 1203 	smull	r1, r2, r2, r3
 8000d18:	1092      	asrs	r2, r2, #2
 8000d1a:	17db      	asrs	r3, r3, #31
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <UpdateDisplayDownBuffer+0x44>)
 8000d20:	6013      	str	r3, [r2, #0]
	 led_buffer[1] = display1 % 10;
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <UpdateDisplayDownBuffer+0x40>)
 8000d26:	fb83 2301 	smull	r2, r3, r3, r1
 8000d2a:	109a      	asrs	r2, r3, #2
 8000d2c:	17cb      	asrs	r3, r1, #31
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1aca      	subs	r2, r1, r3
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <UpdateDisplayDownBuffer+0x44>)
 8000d3c:	605a      	str	r2, [r3, #4]

 }
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	66666667 	.word	0x66666667
 8000d4c:	20000060 	.word	0x20000060

08000d50 <UpdateDisplayUpBuffer>:
 void UpdateDisplayUpBuffer(int display2){
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	 led_buffer[2] = display2 / 10;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <UpdateDisplayUpBuffer+0x40>)
 8000d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d60:	1092      	asrs	r2, r2, #2
 8000d62:	17db      	asrs	r3, r3, #31
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <UpdateDisplayUpBuffer+0x44>)
 8000d68:	6093      	str	r3, [r2, #8]
	 led_buffer[3] = display2 % 10;
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <UpdateDisplayUpBuffer+0x40>)
 8000d6e:	fb83 2301 	smull	r2, r3, r3, r1
 8000d72:	109a      	asrs	r2, r3, #2
 8000d74:	17cb      	asrs	r3, r1, #31
 8000d76:	1ad2      	subs	r2, r2, r3
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	1aca      	subs	r2, r1, r3
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <UpdateDisplayUpBuffer+0x44>)
 8000d84:	60da      	str	r2, [r3, #12]
 }
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	66666667 	.word	0x66666667
 8000d94:	20000060 	.word	0x20000060

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9c:	f000 fcb0 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da0:	f000 f83c 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da4:	f000 f8c2 	bl	8000f2c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000da8:	f000 f874 	bl	8000e94 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT (& htim2 );
 8000dac:	4814      	ldr	r0, [pc, #80]	; (8000e00 <main+0x68>)
 8000dae:	f001 fc05 	bl	80025bc <HAL_TIM_Base_Start_IT>
  status = INIT;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <main+0x6c>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
  setTimer3(10);
 8000db8:	200a      	movs	r0, #10
 8000dba:	f000 fae5 	bl	8001388 <setTimer3>
  setTimer4(100);
 8000dbe:	2064      	movs	r0, #100	; 0x64
 8000dc0:	f000 faf6 	bl	80013b0 <setTimer4>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000dc4:	f000 f986 	bl	80010d4 <SCH_Init>
  SCH_Add_Task(timerRun,0, 10);
 8000dc8:	220a      	movs	r2, #10
 8000dca:	2100      	movs	r1, #0
 8000dcc:	480e      	ldr	r0, [pc, #56]	; (8000e08 <main+0x70>)
 8000dce:	f000 fa57 	bl	8001280 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput,0, 10);
 8000dd2:	220a      	movs	r2, #10
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	480d      	ldr	r0, [pc, #52]	; (8000e0c <main+0x74>)
 8000dd8:	f000 fa52 	bl	8001280 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 0, 10);
 8000ddc:	220a      	movs	r2, #10
 8000dde:	2100      	movs	r1, #0
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <main+0x78>)
 8000de2:	f000 fa4d 	bl	8001280 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 10);
 8000de6:	220a      	movs	r2, #10
 8000de8:	2100      	movs	r1, #0
 8000dea:	480a      	ldr	r0, [pc, #40]	; (8000e14 <main+0x7c>)
 8000dec:	f000 fa48 	bl	8001280 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting_run, 0, 10);
 8000df0:	220a      	movs	r2, #10
 8000df2:	2100      	movs	r1, #0
 8000df4:	4808      	ldr	r0, [pc, #32]	; (8000e18 <main+0x80>)
 8000df6:	f000 fa43 	bl	8001280 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000dfa:	f000 f9f7 	bl	80011ec <SCH_Dispatch_Tasks>
 8000dfe:	e7fc      	b.n	8000dfa <main+0x62>
 8000e00:	200000d4 	.word	0x200000d4
 8000e04:	200000a8 	.word	0x200000a8
 8000e08:	080013d9 	.word	0x080013d9
 8000e0c:	080001a1 	.word	0x080001a1
 8000e10:	080002f1 	.word	0x080002f1
 8000e14:	08000565 	.word	0x08000565
 8000e18:	0800072d 	.word	0x0800072d

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b090      	sub	sp, #64	; 0x40
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0318 	add.w	r3, r7, #24
 8000e26:	2228      	movs	r2, #40	; 0x28
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 ff76 	bl	8002d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e42:	2301      	movs	r3, #1
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e46:	2310      	movs	r3, #16
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4e:	f107 0318 	add.w	r3, r7, #24
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 ff86 	bl	8001d64 <HAL_RCC_OscConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e5e:	f000 f8df 	bl	8001020 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 f9f2 	bl	8002264 <HAL_RCC_ClockConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e86:	f000 f8cb 	bl	8001020 <Error_Handler>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3740      	adds	r7, #64	; 0x40
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eba:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ebe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ec8:	2209      	movs	r2, #9
 8000eca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eda:	f001 fb1f 	bl	800251c <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee4:	f000 f89c 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ef6:	f001 fc9d 	bl	8002834 <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f00:	f000 f88e 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000f12:	f001 fe75 	bl	8002c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f1c:	f000 f880 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000d4 	.word	0x200000d4

08000f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f40:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <MX_GPIO_Init+0xd0>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <MX_GPIO_Init+0xd0>)
 8000f46:	f043 0310 	orr.w	r3, r3, #16
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MX_GPIO_Init+0xd0>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <MX_GPIO_Init+0xd0>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <MX_GPIO_Init+0xd0>)
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <MX_GPIO_Init+0xd0>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <MX_GPIO_Init+0xd0>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <MX_GPIO_Init+0xd0>)
 8000f76:	f043 0308 	orr.w	r3, r3, #8
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_GPIO_Init+0xd0>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_NS_Pin|YELLOW_NS_Pin|GREEN_NS_Pin|RED_EW_Pin
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8000f8e:	481c      	ldr	r0, [pc, #112]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000f90:	f000 feb7 	bl	8001d02 <HAL_GPIO_WritePin>
                          |YELLOW_EW_Pin|GREEN_EW_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000f94:	2200      	movs	r2, #0
 8000f96:	217f      	movs	r1, #127	; 0x7f
 8000f98:	481a      	ldr	r0, [pc, #104]	; (8001004 <MX_GPIO_Init+0xd8>)
 8000f9a:	f000 feb2 	bl	8001d02 <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000f9e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4815      	ldr	r0, [pc, #84]	; (8001008 <MX_GPIO_Init+0xdc>)
 8000fb4:	f000 fd14 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_NS_Pin YELLOW_NS_Pin GREEN_NS_Pin RED_EW_Pin
                           YELLOW_EW_Pin GREEN_EW_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_NS_Pin|YELLOW_NS_Pin|GREEN_NS_Pin|RED_EW_Pin
 8000fb8:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000fbc:	613b      	str	r3, [r7, #16]
                          |YELLOW_EW_Pin|GREEN_EW_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <MX_GPIO_Init+0xd4>)
 8000fd2:	f000 fd05 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000fd6:	237f      	movs	r3, #127	; 0x7f
 8000fd8:	613b      	str	r3, [r7, #16]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_GPIO_Init+0xd8>)
 8000fee:	f000 fcf7 	bl	80019e0 <HAL_GPIO_Init>

}
 8000ff2:	bf00      	nop
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010800 	.word	0x40010800
 8001004:	40010c00 	.word	0x40010c00
 8001008:	40011000 	.word	0x40011000

0800100c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001014:	f000 f87c 	bl	8001110 <SCH_Update>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <SCH_Delete_Task>:
#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
unsigned char Error_code_G = 0;

uint8_t SCH_Delete_Task(uint32_t TASK_INDEX){
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 	unsigned char Return_code;
 	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 8001034:	491f      	ldr	r1, [pc, #124]	; (80010b4 <SCH_Delete_Task+0x88>)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d105      	bne.n	8001054 <SCH_Delete_Task+0x28>
 		// No task at this location ...
 		//
 		// Set the global error variable
 		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <SCH_Delete_Task+0x8c>)
 800104a:	2232      	movs	r2, #50	; 0x32
 800104c:	701a      	strb	r2, [r3, #0]
 		// ... also return an error code
 		Return_code = RETURN_ERROR;
 800104e:	2333      	movs	r3, #51	; 0x33
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e001      	b.n	8001058 <SCH_Delete_Task+0x2c>
 	} else {
 		Return_code = RETURN_NORMAL;
 8001054:	2334      	movs	r3, #52	; 0x34
 8001056:	73fb      	strb	r3, [r7, #15]
 	}
 	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8001058:	4916      	ldr	r1, [pc, #88]	; (80010b4 <SCH_Delete_Task+0x88>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 	SCH_tasks_G[TASK_INDEX].Delay = 0;
 800106a:	4912      	ldr	r1, [pc, #72]	; (80010b4 <SCH_Delete_Task+0x88>)
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	3304      	adds	r3, #4
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 	SCH_tasks_G[TASK_INDEX].Period = 0;
 800107e:	490d      	ldr	r1, [pc, #52]	; (80010b4 <SCH_Delete_Task+0x88>)
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	440b      	add	r3, r1
 800108c:	3308      	adds	r3, #8
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <SCH_Delete_Task+0x88>)
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	330c      	adds	r3, #12
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 	return Return_code;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 }
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	2000011c 	.word	0x2000011c
 80010b8:	200000b0 	.word	0x200000b0

080010bc <Watchdog_init>:
void Watchdog_init(void){
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
 	//TODO
 }
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <Timer_init>:

 void Timer_init(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
 	//TODO
 }
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <SCH_Init>:

 void SCH_Go_To_Sleep(void){
 	//TODO
 }

void SCH_Init(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 	unsigned char i ;
 	for (i = 0; i <SCH_MAX_TASKS; i++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	e006      	b.n	80010ee <SCH_Init+0x1a>
 		SCH_Delete_Task(i);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ffa2 	bl	800102c <SCH_Delete_Task>
 	for (i = 0; i <SCH_MAX_TASKS; i++) {
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	3301      	adds	r3, #1
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b27      	cmp	r3, #39	; 0x27
 80010f2:	d9f5      	bls.n	80010e0 <SCH_Init+0xc>
 	}
 	Error_code_G = 0;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SCH_Init+0x38>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
 	Timer_init();
 80010fa:	f7ff ffe5 	bl	80010c8 <Timer_init>
 	Watchdog_init();
 80010fe:	f7ff ffdd 	bl	80010bc <Watchdog_init>
 }
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000b0 	.word	0x200000b0

08001110 <SCH_Update>:
void SCH_Update(void){
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 	unsigned char Index;
 	//NOTE: calculations are in *TICKS* (not milliseconds)
 	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001116:	2300      	movs	r3, #0
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	e05c      	b.n	80011d6 <SCH_Update+0xc6>
 		// Check if there is a task at this location
 		if (SCH_tasks_G[Index].pTask){
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	4932      	ldr	r1, [pc, #200]	; (80011e8 <SCH_Update+0xd8>)
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d04f      	beq.n	80011d0 <SCH_Update+0xc0>
 			if (SCH_tasks_G[Index].Delay == 0) {
 8001130:	79fa      	ldrb	r2, [r7, #7]
 8001132:	492d      	ldr	r1, [pc, #180]	; (80011e8 <SCH_Update+0xd8>)
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	3304      	adds	r3, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d132      	bne.n	80011ac <SCH_Update+0x9c>
 				// The task is due to run
 				// Inc. the ’RunMe’ flag
 				SCH_tasks_G[Index].RunMe+= 1;
 8001146:	79fa      	ldrb	r2, [r7, #7]
 8001148:	4927      	ldr	r1, [pc, #156]	; (80011e8 <SCH_Update+0xd8>)
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	440b      	add	r3, r1
 8001154:	330c      	adds	r3, #12
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	3301      	adds	r3, #1
 800115c:	b2d8      	uxtb	r0, r3
 800115e:	4922      	ldr	r1, [pc, #136]	; (80011e8 <SCH_Update+0xd8>)
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	330c      	adds	r3, #12
 800116c:	4602      	mov	r2, r0
 800116e:	701a      	strb	r2, [r3, #0]
 				if (SCH_tasks_G[Index].Period) {
 8001170:	79fa      	ldrb	r2, [r7, #7]
 8001172:	491d      	ldr	r1, [pc, #116]	; (80011e8 <SCH_Update+0xd8>)
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	3308      	adds	r3, #8
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d024      	beq.n	80011d0 <SCH_Update+0xc0>
 					// Schedule periodic tasks to run again
 					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8001186:	79f9      	ldrb	r1, [r7, #7]
 8001188:	79fa      	ldrb	r2, [r7, #7]
 800118a:	4817      	ldr	r0, [pc, #92]	; (80011e8 <SCH_Update+0xd8>)
 800118c:	460b      	mov	r3, r1
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4403      	add	r3, r0
 8001196:	3308      	adds	r3, #8
 8001198:	6819      	ldr	r1, [r3, #0]
 800119a:	4813      	ldr	r0, [pc, #76]	; (80011e8 <SCH_Update+0xd8>)
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4403      	add	r3, r0
 80011a6:	3304      	adds	r3, #4
 80011a8:	6019      	str	r1, [r3, #0]
 80011aa:	e011      	b.n	80011d0 <SCH_Update+0xc0>
 				}
 			} else {
 				// Not yet ready to run: just decrement the delay
 				SCH_tasks_G[Index].Delay --;
 80011ac:	79fa      	ldrb	r2, [r7, #7]
 80011ae:	490e      	ldr	r1, [pc, #56]	; (80011e8 <SCH_Update+0xd8>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	3304      	adds	r3, #4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1e59      	subs	r1, r3, #1
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <SCH_Update+0xd8>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4403      	add	r3, r0
 80011cc:	3304      	adds	r3, #4
 80011ce:	6019      	str	r1, [r3, #0]
 	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	3301      	adds	r3, #1
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b27      	cmp	r3, #39	; 0x27
 80011da:	d99f      	bls.n	800111c <SCH_Update+0xc>
 			}
 		}
 	}
 }
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	2000011c 	.word	0x2000011c

080011ec <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 	unsigned char Index;
 	// Dispatches (runs) the next task (if one is ready)
 	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e039      	b.n	800126c <SCH_Dispatch_Tasks+0x80>
 		if (SCH_tasks_G[Index].RunMe> 0) {
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	4920      	ldr	r1, [pc, #128]	; (800127c <SCH_Dispatch_Tasks+0x90>)
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	330c      	adds	r3, #12
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d02b      	beq.n	8001266 <SCH_Dispatch_Tasks+0x7a>
 			(*SCH_tasks_G[Index].pTask)(); // Run the task
 800120e:	79fa      	ldrb	r2, [r7, #7]
 8001210:	491a      	ldr	r1, [pc, #104]	; (800127c <SCH_Dispatch_Tasks+0x90>)
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4798      	blx	r3
 			SCH_tasks_G[Index].RunMe--; // Reset / reduceRunMe flag
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	4916      	ldr	r1, [pc, #88]	; (800127c <SCH_Dispatch_Tasks+0x90>)
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	330c      	adds	r3, #12
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	b2d8      	uxtb	r0, r3
 8001236:	4911      	ldr	r1, [pc, #68]	; (800127c <SCH_Dispatch_Tasks+0x90>)
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	330c      	adds	r3, #12
 8001244:	4602      	mov	r2, r0
 8001246:	701a      	strb	r2, [r3, #0]
 			// Periodic tasks will automatically run again
 			// − if this is a ’one shot’ task, remove it from the array
 			if (SCH_tasks_G[Index].Period == 0){
 8001248:	79fa      	ldrb	r2, [r7, #7]
 800124a:	490c      	ldr	r1, [pc, #48]	; (800127c <SCH_Dispatch_Tasks+0x90>)
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	3308      	adds	r3, #8
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <SCH_Dispatch_Tasks+0x7a>
 				SCH_Delete_Task(Index);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fee3 	bl	800102c <SCH_Delete_Task>
 	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	3301      	adds	r3, #1
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b27      	cmp	r3, #39	; 0x27
 8001270:	d9c2      	bls.n	80011f8 <SCH_Dispatch_Tasks+0xc>
 			}
 		}
 }
 }
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000011c 	.word	0x2000011c

08001280 <SCH_Add_Task>:
 		}
 	}
 #endif
 }

 uint32_t SCH_Add_Task(void (* pFunction) (), uint32_t DELAY, uint32_t PERIOD){
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 	unsigned char Index = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	75fb      	strb	r3, [r7, #23]
 	// First find a gap in the array (if there is one)
 	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8001290:	e002      	b.n	8001298 <SCH_Add_Task+0x18>
 		Index++;
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	3301      	adds	r3, #1
 8001296:	75fb      	strb	r3, [r7, #23]
 	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8001298:	7dfa      	ldrb	r2, [r7, #23]
 800129a:	4924      	ldr	r1, [pc, #144]	; (800132c <SCH_Add_Task+0xac>)
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <SCH_Add_Task+0x32>
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	2b27      	cmp	r3, #39	; 0x27
 80012b0:	d9ef      	bls.n	8001292 <SCH_Add_Task+0x12>
 	}
 	 // Have we reached the end of the list?
 	 if (Index ==SCH_MAX_TASKS){
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2b28      	cmp	r3, #40	; 0x28
 80012b6:	d104      	bne.n	80012c2 <SCH_Add_Task+0x42>
 		 // Task list is full
 		 // Set the global error variable
 		 Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <SCH_Add_Task+0xb0>)
 80012ba:	2235      	movs	r2, #53	; 0x35
 80012bc:	701a      	strb	r2, [r3, #0]
 		 // Also return an error code
 		 return SCH_MAX_TASKS;
 80012be:	2328      	movs	r3, #40	; 0x28
 80012c0:	e02f      	b.n	8001322 <SCH_Add_Task+0xa2>
 	 }
 	 // If we’re here, there is a space in the task array
 	 SCH_tasks_G[Index].pTask = pFunction;
 80012c2:	7dfa      	ldrb	r2, [r7, #23]
 80012c4:	4919      	ldr	r1, [pc, #100]	; (800132c <SCH_Add_Task+0xac>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	601a      	str	r2, [r3, #0]
 	 SCH_tasks_G[Index].Delay = DELAY / TICK;
 80012d4:	7dfa      	ldrb	r2, [r7, #23]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	4916      	ldr	r1, [pc, #88]	; (8001334 <SCH_Add_Task+0xb4>)
 80012da:	fba1 1303 	umull	r1, r3, r1, r3
 80012de:	08d9      	lsrs	r1, r3, #3
 80012e0:	4812      	ldr	r0, [pc, #72]	; (800132c <SCH_Add_Task+0xac>)
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4403      	add	r3, r0
 80012ec:	3304      	adds	r3, #4
 80012ee:	6019      	str	r1, [r3, #0]
 	 SCH_tasks_G[Index].Period = PERIOD / TICK;
 80012f0:	7dfa      	ldrb	r2, [r7, #23]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	490f      	ldr	r1, [pc, #60]	; (8001334 <SCH_Add_Task+0xb4>)
 80012f6:	fba1 1303 	umull	r1, r3, r1, r3
 80012fa:	08d9      	lsrs	r1, r3, #3
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <SCH_Add_Task+0xac>)
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4403      	add	r3, r0
 8001308:	3308      	adds	r3, #8
 800130a:	6019      	str	r1, [r3, #0]
 	 SCH_tasks_G[Index].RunMe= 0;
 800130c:	7dfa      	ldrb	r2, [r7, #23]
 800130e:	4907      	ldr	r1, [pc, #28]	; (800132c <SCH_Add_Task+0xac>)
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	330c      	adds	r3, #12
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
 	 // return position of task (to allow later deletion)
 	 return Index;
 8001320:	7dfb      	ldrb	r3, [r7, #23]
 }
 8001322:	4618      	mov	r0, r3
 8001324:	371c      	adds	r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	2000011c 	.word	0x2000011c
 8001330:	200000b0 	.word	0x200000b0
 8001334:	cccccccd 	.word	0xcccccccd

08001338 <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer1(int duration){
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001340:	4a05      	ldr	r2, [pc, #20]	; (8001358 <setTimer1+0x20>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <setTimer1+0x24>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	200000b4 	.word	0x200000b4
 800135c:	200000b8 	.word	0x200000b8

08001360 <setTimer2>:

void setTimer2(int duration){
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001368:	4a05      	ldr	r2, [pc, #20]	; (8001380 <setTimer2+0x20>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <setTimer2+0x24>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200000bc 	.word	0x200000bc
 8001384:	200000c0 	.word	0x200000c0

08001388 <setTimer3>:

void setTimer3(int duration){
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001390:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <setTimer3+0x20>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <setTimer3+0x24>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200000c4 	.word	0x200000c4
 80013ac:	200000c8 	.word	0x200000c8

080013b0 <setTimer4>:
void setTimer4(int duration){
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 80013b8:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <setTimer4+0x20>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <setTimer4+0x24>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200000cc 	.word	0x200000cc
 80013d4:	200000d0 	.word	0x200000d0

080013d8 <timerRun>:
void timerRun(){
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <timerRun+0x8c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd0b      	ble.n	80013fc <timerRun+0x24>
		timer1_counter--;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <timerRun+0x8c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <timerRun+0x8c>)
 80013ec:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <timerRun+0x8c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dc02      	bgt.n	80013fc <timerRun+0x24>
			timer1_flag = 1;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <timerRun+0x90>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <timerRun+0x94>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	dd0b      	ble.n	800141c <timerRun+0x44>
		timer2_counter--;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <timerRun+0x94>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <timerRun+0x94>)
 800140c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <timerRun+0x94>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	dc02      	bgt.n	800141c <timerRun+0x44>
			timer2_flag = 1;
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <timerRun+0x98>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <timerRun+0x9c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	dd0b      	ble.n	800143c <timerRun+0x64>
		timer3_counter--;
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <timerRun+0x9c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3b01      	subs	r3, #1
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <timerRun+0x9c>)
 800142c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <timerRun+0x9c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dc02      	bgt.n	800143c <timerRun+0x64>
			timer3_flag = 1;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <timerRun+0xa0>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <timerRun+0xa4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	dd0b      	ble.n	800145c <timerRun+0x84>
		timer4_counter--;
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <timerRun+0xa4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3b01      	subs	r3, #1
 800144a:	4a0c      	ldr	r2, [pc, #48]	; (800147c <timerRun+0xa4>)
 800144c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <timerRun+0xa4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	dc02      	bgt.n	800145c <timerRun+0x84>
			timer4_flag = 1;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <timerRun+0xa8>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	200000b4 	.word	0x200000b4
 8001468:	200000b8 	.word	0x200000b8
 800146c:	200000bc 	.word	0x200000bc
 8001470:	200000c0 	.word	0x200000c0
 8001474:	200000c4 	.word	0x200000c4
 8001478:	200000c8 	.word	0x200000c8
 800147c:	200000cc 	.word	0x200000cc
 8001480:	200000d0 	.word	0x200000d0

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_MspInit+0x5c>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <HAL_MspInit+0x5c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_MspInit+0x5c>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_MspInit+0x5c>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_MspInit+0x5c>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_MspInit+0x5c>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_MspInit+0x60>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_MspInit+0x60>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000

080014e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f8:	d113      	bne.n	8001522 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_TIM_Base_MspInit+0x44>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <HAL_TIM_Base_MspInit+0x44>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	61d3      	str	r3, [r2, #28]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_TIM_Base_MspInit+0x44>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	201c      	movs	r0, #28
 8001518:	f000 fa2b 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800151c:	201c      	movs	r0, #28
 800151e:	f000 fa44 	bl	80019aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001576:	f000 f909 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <TIM2_IRQHandler+0x10>)
 8001586:	f001 f865 	bl	8002654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200000d4 	.word	0x200000d4

08001594 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <clear_traffic_light>:
 *      Author: Fung
 */

#include "traffic_light.h"

void clear_traffic_light(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_NS_GPIO_Port, RED_NS_Pin, RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2110      	movs	r1, #16
 80015a8:	480f      	ldr	r0, [pc, #60]	; (80015e8 <clear_traffic_light+0x48>)
 80015aa:	f000 fbaa 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_EW_GPIO_Port, RED_EW_Pin, RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <clear_traffic_light+0x48>)
 80015b4:	f000 fba5 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_NS_GPIO_Port, YELLOW_NS_Pin, RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2120      	movs	r1, #32
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <clear_traffic_light+0x48>)
 80015be:	f000 fba0 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_EW_GPIO_Port, YELLOW_EW_Pin, RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <clear_traffic_light+0x48>)
 80015ca:	f000 fb9a 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_NS_GPIO_Port, GREEN_NS_Pin, RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2140      	movs	r1, #64	; 0x40
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <clear_traffic_light+0x48>)
 80015d4:	f000 fb95 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_EW_GPIO_Port, GREEN_EW_Pin, RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015de:	4802      	ldr	r0, [pc, #8]	; (80015e8 <clear_traffic_light+0x48>)
 80015e0:	f000 fb8f 	bl	8001d02 <HAL_GPIO_WritePin>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40010800 	.word	0x40010800

080015ec <onRed_NS>:
void onRed_NS(){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_NS_GPIO_Port, RED_NS_Pin, SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2110      	movs	r1, #16
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <onRed_NS+0x14>)
 80015f6:	f000 fb84 	bl	8001d02 <HAL_GPIO_WritePin>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40010800 	.word	0x40010800

08001604 <onYellow_NS>:
void onYellow_NS(){
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW_NS_GPIO_Port, YELLOW_NS_Pin, SET);
 8001608:	2201      	movs	r2, #1
 800160a:	2120      	movs	r1, #32
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <onYellow_NS+0x14>)
 800160e:	f000 fb78 	bl	8001d02 <HAL_GPIO_WritePin>
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40010800 	.word	0x40010800

0800161c <onGreen_NS>:
void onGreen_NS(){
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_NS_GPIO_Port, GREEN_NS_Pin, SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2140      	movs	r1, #64	; 0x40
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <onGreen_NS+0x14>)
 8001626:	f000 fb6c 	bl	8001d02 <HAL_GPIO_WritePin>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40010800 	.word	0x40010800

08001634 <onRed_EW>:
void onRed_EW(){
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_EW_GPIO_Port, RED_EW_Pin, SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <onRed_EW+0x14>)
 800163e:	f000 fb60 	bl	8001d02 <HAL_GPIO_WritePin>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40010800 	.word	0x40010800

0800164c <onYellow_EW>:
void onYellow_EW(){
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW_EW_GPIO_Port, YELLOW_EW_Pin, SET);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001656:	4802      	ldr	r0, [pc, #8]	; (8001660 <onYellow_EW+0x14>)
 8001658:	f000 fb53 	bl	8001d02 <HAL_GPIO_WritePin>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40010800 	.word	0x40010800

08001664 <onGreen_EW>:
void onGreen_EW(){
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_EW_GPIO_Port, GREEN_EW_Pin, SET);
 8001668:	2201      	movs	r2, #1
 800166a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166e:	4802      	ldr	r0, [pc, #8]	; (8001678 <onGreen_EW+0x14>)
 8001670:	f000 fb47 	bl	8001d02 <HAL_GPIO_WritePin>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40010800 	.word	0x40010800

0800167c <time>:

void time(){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	if(timer4_flag == 1){
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <time+0x2c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d10c      	bne.n	80016a2 <time+0x26>
		setTimer4(100);
 8001688:	2064      	movs	r0, #100	; 0x64
 800168a:	f7ff fe91 	bl	80013b0 <setTimer4>
		duration_led_NS--;
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <time+0x30>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3b01      	subs	r3, #1
 8001694:	4a05      	ldr	r2, [pc, #20]	; (80016ac <time+0x30>)
 8001696:	6013      	str	r3, [r2, #0]
		duration_led_EW--;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <time+0x34>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3b01      	subs	r3, #1
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <time+0x34>)
 80016a0:	6013      	str	r3, [r2, #0]
	}
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200000d0 	.word	0x200000d0
 80016ac:	20000054 	.word	0x20000054
 80016b0:	20000058 	.word	0x20000058

080016b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b4:	f7ff ff6e 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016ba:	490c      	ldr	r1, [pc, #48]	; (80016ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016bc:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016d0:	4c09      	ldr	r4, [pc, #36]	; (80016f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016de:	f001 faf9 	bl	8002cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016e2:	f7ff fb59 	bl	8000d98 <main>
  bx lr
 80016e6:	4770      	bx	lr
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80016f0:	08002d70 	.word	0x08002d70
  ldr r2, =_sbss
 80016f4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80016f8:	20000440 	.word	0x20000440

080016fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_2_IRQHandler>
	...

08001700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_Init+0x28>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_Init+0x28>)
 800170a:	f043 0310 	orr.w	r3, r3, #16
 800170e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001710:	2003      	movs	r0, #3
 8001712:	f000 f923 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001716:	200f      	movs	r0, #15
 8001718:	f000 f808 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171c:	f7ff feb2 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40022000 	.word	0x40022000

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x54>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x58>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f93b 	bl	80019c6 <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f000 f903 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x5c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000070 	.word	0x20000070
 8001784:	20000078 	.word	0x20000078
 8001788:	20000074 	.word	0x20000074

0800178c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_IncTick+0x1c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_IncTick+0x20>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_IncTick+0x20>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	20000078 	.word	0x20000078
 80017ac:	2000043c 	.word	0x2000043c

080017b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <HAL_GetTick+0x10>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	2000043c 	.word	0x2000043c

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4906      	ldr	r1, [pc, #24]	; (800185c <__NVIC_EnableIRQ+0x34>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f7ff ff90 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff2d 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff42 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff90 	bl	80018b4 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5f 	bl	8001860 <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff35 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffa2 	bl	8001918 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b08b      	sub	sp, #44	; 0x2c
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f2:	e148      	b.n	8001c86 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019f4:	2201      	movs	r2, #1
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8137 	bne.w	8001c80 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4aa3      	ldr	r2, [pc, #652]	; (8001ca4 <HAL_GPIO_Init+0x2c4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d05e      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a1c:	4aa1      	ldr	r2, [pc, #644]	; (8001ca4 <HAL_GPIO_Init+0x2c4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d875      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a22:	4aa1      	ldr	r2, [pc, #644]	; (8001ca8 <HAL_GPIO_Init+0x2c8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d058      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a28:	4a9f      	ldr	r2, [pc, #636]	; (8001ca8 <HAL_GPIO_Init+0x2c8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d86f      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a2e:	4a9f      	ldr	r2, [pc, #636]	; (8001cac <HAL_GPIO_Init+0x2cc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d052      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a34:	4a9d      	ldr	r2, [pc, #628]	; (8001cac <HAL_GPIO_Init+0x2cc>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d869      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a3a:	4a9d      	ldr	r2, [pc, #628]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d04c      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a40:	4a9b      	ldr	r2, [pc, #620]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d863      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a46:	4a9b      	ldr	r2, [pc, #620]	; (8001cb4 <HAL_GPIO_Init+0x2d4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d046      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a4c:	4a99      	ldr	r2, [pc, #612]	; (8001cb4 <HAL_GPIO_Init+0x2d4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d85d      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a52:	2b12      	cmp	r3, #18
 8001a54:	d82a      	bhi.n	8001aac <HAL_GPIO_Init+0xcc>
 8001a56:	2b12      	cmp	r3, #18
 8001a58:	d859      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a5a:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <HAL_GPIO_Init+0x80>)
 8001a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a60:	08001adb 	.word	0x08001adb
 8001a64:	08001ab5 	.word	0x08001ab5
 8001a68:	08001ac7 	.word	0x08001ac7
 8001a6c:	08001b09 	.word	0x08001b09
 8001a70:	08001b0f 	.word	0x08001b0f
 8001a74:	08001b0f 	.word	0x08001b0f
 8001a78:	08001b0f 	.word	0x08001b0f
 8001a7c:	08001b0f 	.word	0x08001b0f
 8001a80:	08001b0f 	.word	0x08001b0f
 8001a84:	08001b0f 	.word	0x08001b0f
 8001a88:	08001b0f 	.word	0x08001b0f
 8001a8c:	08001b0f 	.word	0x08001b0f
 8001a90:	08001b0f 	.word	0x08001b0f
 8001a94:	08001b0f 	.word	0x08001b0f
 8001a98:	08001b0f 	.word	0x08001b0f
 8001a9c:	08001b0f 	.word	0x08001b0f
 8001aa0:	08001b0f 	.word	0x08001b0f
 8001aa4:	08001abd 	.word	0x08001abd
 8001aa8:	08001ad1 	.word	0x08001ad1
 8001aac:	4a82      	ldr	r2, [pc, #520]	; (8001cb8 <HAL_GPIO_Init+0x2d8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ab2:	e02c      	b.n	8001b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e029      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	623b      	str	r3, [r7, #32]
          break;
 8001ac4:	e024      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	3308      	adds	r3, #8
 8001acc:	623b      	str	r3, [r7, #32]
          break;
 8001ace:	e01f      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	623b      	str	r3, [r7, #32]
          break;
 8001ad8:	e01a      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	623b      	str	r3, [r7, #32]
          break;
 8001ae6:	e013      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af0:	2308      	movs	r3, #8
 8001af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	611a      	str	r2, [r3, #16]
          break;
 8001afa:	e009      	b.n	8001b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001afc:	2308      	movs	r3, #8
 8001afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	615a      	str	r2, [r3, #20]
          break;
 8001b06:	e003      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
          break;
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          break;
 8001b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d801      	bhi.n	8001b1a <HAL_GPIO_Init+0x13a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_Init+0x13e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2bff      	cmp	r3, #255	; 0xff
 8001b24:	d802      	bhi.n	8001b2c <HAL_GPIO_Init+0x14c>
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x152>
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	3b08      	subs	r3, #8
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	210f      	movs	r1, #15
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	401a      	ands	r2, r3
 8001b44:	6a39      	ldr	r1, [r7, #32]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8090 	beq.w	8001c80 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b60:	4b56      	ldr	r3, [pc, #344]	; (8001cbc <HAL_GPIO_Init+0x2dc>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a55      	ldr	r2, [pc, #340]	; (8001cbc <HAL_GPIO_Init+0x2dc>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b53      	ldr	r3, [pc, #332]	; (8001cbc <HAL_GPIO_Init+0x2dc>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_GPIO_Init+0x2e0>)
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a49      	ldr	r2, [pc, #292]	; (8001cc4 <HAL_GPIO_Init+0x2e4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d00d      	beq.n	8001bc0 <HAL_GPIO_Init+0x1e0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a48      	ldr	r2, [pc, #288]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d007      	beq.n	8001bbc <HAL_GPIO_Init+0x1dc>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a47      	ldr	r2, [pc, #284]	; (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d101      	bne.n	8001bb8 <HAL_GPIO_Init+0x1d8>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e004      	b.n	8001bc2 <HAL_GPIO_Init+0x1e2>
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e002      	b.n	8001bc2 <HAL_GPIO_Init+0x1e2>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <HAL_GPIO_Init+0x1e2>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc4:	f002 0203 	and.w	r2, r2, #3
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	4093      	lsls	r3, r2
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bd2:	493b      	ldr	r1, [pc, #236]	; (8001cc0 <HAL_GPIO_Init+0x2e0>)
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bec:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	4937      	ldr	r1, [pc, #220]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bfa:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4933      	ldr	r1, [pc, #204]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c14:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	492d      	ldr	r1, [pc, #180]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
 8001c20:	e006      	b.n	8001c30 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c22:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	4929      	ldr	r1, [pc, #164]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4923      	ldr	r1, [pc, #140]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c4a:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	491f      	ldr	r1, [pc, #124]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4919      	ldr	r1, [pc, #100]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	4915      	ldr	r1, [pc, #84]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	3301      	adds	r3, #1
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f47f aeaf 	bne.w	80019f4 <HAL_GPIO_Init+0x14>
  }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	372c      	adds	r7, #44	; 0x2c
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	10320000 	.word	0x10320000
 8001ca8:	10310000 	.word	0x10310000
 8001cac:	10220000 	.word	0x10220000
 8001cb0:	10210000 	.word	0x10210000
 8001cb4:	10120000 	.word	0x10120000
 8001cb8:	10110000 	.word	0x10110000
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40010800 	.word	0x40010800
 8001cc8:	40010c00 	.word	0x40010c00
 8001ccc:	40011000 	.word	0x40011000
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e001      	b.n	8001cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	807b      	strh	r3, [r7, #2]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d12:	787b      	ldrb	r3, [r7, #1]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d18:	887a      	ldrh	r2, [r7, #2]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d1e:	e003      	b.n	8001d28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	611a      	str	r2, [r3, #16]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d44:	887a      	ldrh	r2, [r7, #2]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	041a      	lsls	r2, r3, #16
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	400b      	ands	r3, r1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	611a      	str	r2, [r3, #16]
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e26c      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8087 	beq.w	8001e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d84:	4b92      	ldr	r3, [pc, #584]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d00c      	beq.n	8001daa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d90:	4b8f      	ldr	r3, [pc, #572]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d112      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x5e>
 8001d9c:	4b8c      	ldr	r3, [pc, #560]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da8:	d10b      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001daa:	4b89      	ldr	r3, [pc, #548]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d06c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x12c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d168      	bne.n	8001e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e246      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x76>
 8001dcc:	4b80      	ldr	r3, [pc, #512]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a7f      	ldr	r2, [pc, #508]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	e02e      	b.n	8001e38 <HAL_RCC_OscConfig+0xd4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x98>
 8001de2:	4b7b      	ldr	r3, [pc, #492]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7a      	ldr	r2, [pc, #488]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b78      	ldr	r3, [pc, #480]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a77      	ldr	r2, [pc, #476]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e01d      	b.n	8001e38 <HAL_RCC_OscConfig+0xd4>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0xbc>
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a71      	ldr	r2, [pc, #452]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b6f      	ldr	r3, [pc, #444]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a6e      	ldr	r2, [pc, #440]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e00b      	b.n	8001e38 <HAL_RCC_OscConfig+0xd4>
 8001e20:	4b6b      	ldr	r3, [pc, #428]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a6a      	ldr	r2, [pc, #424]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a67      	ldr	r2, [pc, #412]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d013      	beq.n	8001e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fcb6 	bl	80017b0 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff fcb2 	bl	80017b0 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e1fa      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b5d      	ldr	r3, [pc, #372]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0xe4>
 8001e66:	e014      	b.n	8001e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fca2 	bl	80017b0 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff fc9e 	bl	80017b0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e1e6      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x10c>
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d063      	beq.n	8001f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e9e:	4b4c      	ldr	r3, [pc, #304]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eaa:	4b49      	ldr	r3, [pc, #292]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d11c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x18c>
 8001eb6:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d116      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_RCC_OscConfig+0x176>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e1ba      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4939      	ldr	r1, [pc, #228]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eee:	e03a      	b.n	8001f66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef8:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff fc57 	bl	80017b0 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff fc53 	bl	80017b0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e19b      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4927      	ldr	r1, [pc, #156]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]
 8001f38:	e015      	b.n	8001f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3a:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fc36 	bl	80017b0 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff fc32 	bl	80017b0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e17a      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d03a      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d019      	beq.n	8001fae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7ff fc16 	bl	80017b0 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff fc12 	bl	80017b0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e15a      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f000 fa9a 	bl	80024e0 <RCC_Delay>
 8001fac:	e01c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7ff fbfc 	bl	80017b0 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fba:	e00f      	b.n	8001fdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7ff fbf8 	bl	80017b0 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d908      	bls.n	8001fdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e140      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	42420000 	.word	0x42420000
 8001fd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fdc:	4b9e      	ldr	r3, [pc, #632]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1e9      	bne.n	8001fbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80a6 	beq.w	8002142 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffa:	4b97      	ldr	r3, [pc, #604]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10d      	bne.n	8002022 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b94      	ldr	r3, [pc, #592]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a93      	ldr	r2, [pc, #588]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b91      	ldr	r3, [pc, #580]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201e:	2301      	movs	r3, #1
 8002020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002022:	4b8e      	ldr	r3, [pc, #568]	; (800225c <HAL_RCC_OscConfig+0x4f8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d118      	bne.n	8002060 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202e:	4b8b      	ldr	r3, [pc, #556]	; (800225c <HAL_RCC_OscConfig+0x4f8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a8a      	ldr	r2, [pc, #552]	; (800225c <HAL_RCC_OscConfig+0x4f8>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203a:	f7ff fbb9 	bl	80017b0 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002042:	f7ff fbb5 	bl	80017b0 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b64      	cmp	r3, #100	; 0x64
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0fd      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	4b81      	ldr	r3, [pc, #516]	; (800225c <HAL_RCC_OscConfig+0x4f8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x312>
 8002068:	4b7b      	ldr	r3, [pc, #492]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4a7a      	ldr	r2, [pc, #488]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	e02d      	b.n	80020d2 <HAL_RCC_OscConfig+0x36e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x334>
 800207e:	4b76      	ldr	r3, [pc, #472]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4a75      	ldr	r2, [pc, #468]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6213      	str	r3, [r2, #32]
 800208a:	4b73      	ldr	r3, [pc, #460]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a72      	ldr	r2, [pc, #456]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	6213      	str	r3, [r2, #32]
 8002096:	e01c      	b.n	80020d2 <HAL_RCC_OscConfig+0x36e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x356>
 80020a0:	4b6d      	ldr	r3, [pc, #436]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a6c      	ldr	r2, [pc, #432]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	4b6a      	ldr	r3, [pc, #424]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a69      	ldr	r2, [pc, #420]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0x36e>
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a66      	ldr	r2, [pc, #408]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6213      	str	r3, [r2, #32]
 80020c6:	4b64      	ldr	r3, [pc, #400]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a63      	ldr	r2, [pc, #396]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d015      	beq.n	8002106 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7ff fb69 	bl	80017b0 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7ff fb65 	bl	80017b0 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e0ab      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	4b57      	ldr	r3, [pc, #348]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ee      	beq.n	80020e2 <HAL_RCC_OscConfig+0x37e>
 8002104:	e014      	b.n	8002130 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7ff fb53 	bl	80017b0 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff fb4f 	bl	80017b0 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e095      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	4b4c      	ldr	r3, [pc, #304]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ee      	bne.n	800210e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002130:	7dfb      	ldrb	r3, [r7, #23]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b48      	ldr	r3, [pc, #288]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a47      	ldr	r2, [pc, #284]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002140:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8081 	beq.w	800224e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214c:	4b42      	ldr	r3, [pc, #264]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d061      	beq.n	800221c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d146      	bne.n	80021ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <HAL_RCC_OscConfig+0x4fc>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fb23 	bl	80017b0 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fb1f 	bl	80017b0 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e067      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002180:	4b35      	ldr	r3, [pc, #212]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f0      	bne.n	800216e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002194:	d108      	bne.n	80021a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002196:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	492d      	ldr	r1, [pc, #180]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a19      	ldr	r1, [r3, #32]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	430b      	orrs	r3, r1
 80021ba:	4927      	ldr	r1, [pc, #156]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCC_OscConfig+0x4fc>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7ff faf3 	bl	80017b0 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7ff faef 	bl	80017b0 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e037      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x46a>
 80021ec:	e02f      	b.n	800224e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <HAL_RCC_OscConfig+0x4fc>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff fadc 	bl	80017b0 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff fad8 	bl	80017b0 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e020      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x498>
 800221a:	e018      	b.n	800224e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e013      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	429a      	cmp	r2, r3
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
 8002260:	42420060 	.word	0x42420060

08002264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0d0      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002278:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d910      	bls.n	80022a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b67      	ldr	r3, [pc, #412]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 0207 	bic.w	r2, r3, #7
 800228e:	4965      	ldr	r1, [pc, #404]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b63      	ldr	r3, [pc, #396]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0b8      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c0:	4b59      	ldr	r3, [pc, #356]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a58      	ldr	r2, [pc, #352]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d8:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a52      	ldr	r2, [pc, #328]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e4:	4b50      	ldr	r3, [pc, #320]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	494d      	ldr	r1, [pc, #308]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d040      	beq.n	8002384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b47      	ldr	r3, [pc, #284]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d115      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e07f      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002322:	4b41      	ldr	r3, [pc, #260]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e073      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06b      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002342:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4936      	ldr	r1, [pc, #216]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002354:	f7ff fa2c 	bl	80017b0 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	e00a      	b.n	8002372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235c:	f7ff fa28 	bl	80017b0 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	; 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e053      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 020c 	and.w	r2, r3, #12
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	429a      	cmp	r2, r3
 8002382:	d1eb      	bne.n	800235c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d210      	bcs.n	80023b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 0207 	bic.w	r2, r3, #7
 800239a:	4922      	ldr	r1, [pc, #136]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e032      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4916      	ldr	r1, [pc, #88]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	490e      	ldr	r1, [pc, #56]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023f2:	f000 f821 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	490a      	ldr	r1, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x1c8>)
 8002404:	5ccb      	ldrb	r3, [r1, r3]
 8002406:	fa22 f303 	lsr.w	r3, r2, r3
 800240a:	4a09      	ldr	r2, [pc, #36]	; (8002430 <HAL_RCC_ClockConfig+0x1cc>)
 800240c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_RCC_ClockConfig+0x1d0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff f98a 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40022000 	.word	0x40022000
 8002428:	40021000 	.word	0x40021000
 800242c:	08002d44 	.word	0x08002d44
 8002430:	20000070 	.word	0x20000070
 8002434:	20000074 	.word	0x20000074

08002438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002452:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b04      	cmp	r3, #4
 8002460:	d002      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x30>
 8002462:	2b08      	cmp	r3, #8
 8002464:	d003      	beq.n	800246e <HAL_RCC_GetSysClockFreq+0x36>
 8002466:	e027      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800246a:	613b      	str	r3, [r7, #16]
      break;
 800246c:	e027      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	0c9b      	lsrs	r3, r3, #18
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002478:	5cd3      	ldrb	r3, [r2, r3]
 800247a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d010      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	0c5b      	lsrs	r3, r3, #17
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002492:	5cd3      	ldrb	r3, [r2, r3]
 8002494:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800249a:	fb02 f203 	mul.w	r2, r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e004      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	613b      	str	r3, [r7, #16]
      break;
 80024b6:	e002      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ba:	613b      	str	r3, [r7, #16]
      break;
 80024bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024be:	693b      	ldr	r3, [r7, #16]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	08002d54 	.word	0x08002d54
 80024d8:	08002d64 	.word	0x08002d64
 80024dc:	003d0900 	.word	0x003d0900

080024e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <RCC_Delay+0x34>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <RCC_Delay+0x38>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0a5b      	lsrs	r3, r3, #9
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024fc:	bf00      	nop
  }
  while (Delay --);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1e5a      	subs	r2, r3, #1
 8002502:	60fa      	str	r2, [r7, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f9      	bne.n	80024fc <RCC_Delay+0x1c>
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	20000070 	.word	0x20000070
 8002518:	10624dd3 	.word	0x10624dd3

0800251c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e041      	b.n	80025b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe ffd0 	bl	80014e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f000 fa56 	bl	8002a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d001      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e035      	b.n	8002640 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_TIM_Base_Start_IT+0x90>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_TIM_Base_Start_IT+0x4e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fe:	d004      	beq.n	800260a <HAL_TIM_Base_Start_IT+0x4e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a12      	ldr	r2, [pc, #72]	; (8002650 <HAL_TIM_Base_Start_IT+0x94>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d111      	bne.n	800262e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b06      	cmp	r3, #6
 800261a:	d010      	beq.n	800263e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262c:	e007      	b.n	800263e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40000400 	.word	0x40000400

08002654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d020      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01b      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0202 	mvn.w	r2, #2
 8002688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f998 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 80026a4:	e005      	b.n	80026b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f98b 	bl	80029c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f99a 	bl	80029e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d020      	beq.n	8002704 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01b      	beq.n	8002704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0204 	mvn.w	r2, #4
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f972 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f965 	bl	80029c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f974 	bl	80029e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d020      	beq.n	8002750 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01b      	beq.n	8002750 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0208 	mvn.w	r2, #8
 8002720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2204      	movs	r2, #4
 8002726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f94c 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 800273c:	e005      	b.n	800274a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f93f 	bl	80029c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f94e 	bl	80029e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d020      	beq.n	800279c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01b      	beq.n	800279c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0210 	mvn.w	r2, #16
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2208      	movs	r2, #8
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f926 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f919 	bl	80029c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f928 	bl	80029e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00c      	beq.n	80027c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0201 	mvn.w	r2, #1
 80027b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fe fc26 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00c      	beq.n	80027e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d007      	beq.n	80027e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fa6f 	bl	8002cc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00c      	beq.n	8002808 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8f8 	bl	80029f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00c      	beq.n	800282c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0220 	mvn.w	r2, #32
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fa42 	bl	8002cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_TIM_ConfigClockSource+0x1c>
 800284c:	2302      	movs	r3, #2
 800284e:	e0b4      	b.n	80029ba <HAL_TIM_ConfigClockSource+0x186>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800286e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002888:	d03e      	beq.n	8002908 <HAL_TIM_ConfigClockSource+0xd4>
 800288a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800288e:	f200 8087 	bhi.w	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002896:	f000 8086 	beq.w	80029a6 <HAL_TIM_ConfigClockSource+0x172>
 800289a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289e:	d87f      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b70      	cmp	r3, #112	; 0x70
 80028a2:	d01a      	beq.n	80028da <HAL_TIM_ConfigClockSource+0xa6>
 80028a4:	2b70      	cmp	r3, #112	; 0x70
 80028a6:	d87b      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b60      	cmp	r3, #96	; 0x60
 80028aa:	d050      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x11a>
 80028ac:	2b60      	cmp	r3, #96	; 0x60
 80028ae:	d877      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b50      	cmp	r3, #80	; 0x50
 80028b2:	d03c      	beq.n	800292e <HAL_TIM_ConfigClockSource+0xfa>
 80028b4:	2b50      	cmp	r3, #80	; 0x50
 80028b6:	d873      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d058      	beq.n	800296e <HAL_TIM_ConfigClockSource+0x13a>
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d86f      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b30      	cmp	r3, #48	; 0x30
 80028c2:	d064      	beq.n	800298e <HAL_TIM_ConfigClockSource+0x15a>
 80028c4:	2b30      	cmp	r3, #48	; 0x30
 80028c6:	d86b      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d060      	beq.n	800298e <HAL_TIM_ConfigClockSource+0x15a>
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d867      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d05c      	beq.n	800298e <HAL_TIM_ConfigClockSource+0x15a>
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d05a      	beq.n	800298e <HAL_TIM_ConfigClockSource+0x15a>
 80028d8:	e062      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6899      	ldr	r1, [r3, #8]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f000 f96a 	bl	8002bc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	609a      	str	r2, [r3, #8]
      break;
 8002906:	e04f      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6899      	ldr	r1, [r3, #8]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f000 f953 	bl	8002bc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800292a:	609a      	str	r2, [r3, #8]
      break;
 800292c:	e03c      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6859      	ldr	r1, [r3, #4]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	461a      	mov	r2, r3
 800293c:	f000 f8ca 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2150      	movs	r1, #80	; 0x50
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f921 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 800294c:	e02c      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6859      	ldr	r1, [r3, #4]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	461a      	mov	r2, r3
 800295c:	f000 f8e8 	bl	8002b30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2160      	movs	r1, #96	; 0x60
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f911 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 800296c:	e01c      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	461a      	mov	r2, r3
 800297c:	f000 f8aa 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2140      	movs	r1, #64	; 0x40
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f901 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 800298c:	e00c      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4619      	mov	r1, r3
 8002998:	4610      	mov	r0, r2
 800299a:	f000 f8f8 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 800299e:	e003      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      break;
 80029a4:	e000      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
	...

08002a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a2b      	ldr	r2, [pc, #172]	; (8002acc <TIM_Base_SetConfig+0xc0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <TIM_Base_SetConfig+0x28>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2a:	d003      	beq.n	8002a34 <TIM_Base_SetConfig+0x28>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a28      	ldr	r2, [pc, #160]	; (8002ad0 <TIM_Base_SetConfig+0xc4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d108      	bne.n	8002a46 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a20      	ldr	r2, [pc, #128]	; (8002acc <TIM_Base_SetConfig+0xc0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d007      	beq.n	8002a5e <TIM_Base_SetConfig+0x52>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d003      	beq.n	8002a5e <TIM_Base_SetConfig+0x52>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <TIM_Base_SetConfig+0xc4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d108      	bne.n	8002a70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <TIM_Base_SetConfig+0xc0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d103      	bne.n	8002aa4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f023 0201 	bic.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	611a      	str	r2, [r3, #16]
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40000400 	.word	0x40000400

08002ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f023 030a 	bic.w	r3, r3, #10
 8002b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f023 0210 	bic.w	r2, r3, #16
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	031b      	lsls	r3, r3, #12
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	621a      	str	r2, [r3, #32]
}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f043 0307 	orr.w	r3, r3, #7
 8002bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	609a      	str	r2, [r3, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b087      	sub	sp, #28
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	021a      	lsls	r2, r3, #8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	609a      	str	r2, [r3, #8]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e041      	b.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d009      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d004      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a10      	ldr	r2, [pc, #64]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10c      	bne.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400

08002cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <__libc_init_array>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	2600      	movs	r6, #0
 8002cd8:	4d0c      	ldr	r5, [pc, #48]	; (8002d0c <__libc_init_array+0x38>)
 8002cda:	4c0d      	ldr	r4, [pc, #52]	; (8002d10 <__libc_init_array+0x3c>)
 8002cdc:	1b64      	subs	r4, r4, r5
 8002cde:	10a4      	asrs	r4, r4, #2
 8002ce0:	42a6      	cmp	r6, r4
 8002ce2:	d109      	bne.n	8002cf8 <__libc_init_array+0x24>
 8002ce4:	f000 f822 	bl	8002d2c <_init>
 8002ce8:	2600      	movs	r6, #0
 8002cea:	4d0a      	ldr	r5, [pc, #40]	; (8002d14 <__libc_init_array+0x40>)
 8002cec:	4c0a      	ldr	r4, [pc, #40]	; (8002d18 <__libc_init_array+0x44>)
 8002cee:	1b64      	subs	r4, r4, r5
 8002cf0:	10a4      	asrs	r4, r4, #2
 8002cf2:	42a6      	cmp	r6, r4
 8002cf4:	d105      	bne.n	8002d02 <__libc_init_array+0x2e>
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
 8002cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfc:	4798      	blx	r3
 8002cfe:	3601      	adds	r6, #1
 8002d00:	e7ee      	b.n	8002ce0 <__libc_init_array+0xc>
 8002d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d06:	4798      	blx	r3
 8002d08:	3601      	adds	r6, #1
 8002d0a:	e7f2      	b.n	8002cf2 <__libc_init_array+0x1e>
 8002d0c:	08002d68 	.word	0x08002d68
 8002d10:	08002d68 	.word	0x08002d68
 8002d14:	08002d68 	.word	0x08002d68
 8002d18:	08002d6c 	.word	0x08002d6c

08002d1c <memset>:
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4402      	add	r2, r0
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d100      	bne.n	8002d26 <memset+0xa>
 8002d24:	4770      	bx	lr
 8002d26:	f803 1b01 	strb.w	r1, [r3], #1
 8002d2a:	e7f9      	b.n	8002d20 <memset+0x4>

08002d2c <_init>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr

08002d38 <_fini>:
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	bf00      	nop
 8002d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3e:	bc08      	pop	{r3}
 8002d40:	469e      	mov	lr, r3
 8002d42:	4770      	bx	lr
