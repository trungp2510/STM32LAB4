
lab4_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd8  08002dd8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002dd8  08002dd8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dd8  08002dd8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  2000007c  08002e5c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08002e5c  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f58  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  00029ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017119  00000000  00000000  0002d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c970  00000000  00000000  000443f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826eb  00000000  00000000  00050d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3454  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a88  00000000  00000000  000d34a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d9c 	.word	0x08002d9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08002d9c 	.word	0x08002d9c

0800014c <isButtonPressed>:
int keyReg2[3] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg3[3] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int TimeForKeyPress[3] = {200,200,200};


int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000098 	.word	0x20000098

08000180 <subKeyProcess>:
void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000098 	.word	0x20000098

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e08c      	b.n	80002c6 <getKeyInput+0x126>
		keyReg0[i] = keyReg1[i];
 80001ac:	4a4a      	ldr	r2, [pc, #296]	; (80002d8 <getKeyInput+0x138>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4949      	ldr	r1, [pc, #292]	; (80002dc <getKeyInput+0x13c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001bc:	4a48      	ldr	r2, [pc, #288]	; (80002e0 <getKeyInput+0x140>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4944      	ldr	r1, [pc, #272]	; (80002d8 <getKeyInput+0x138>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch(i){
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d021      	beq.n	8000216 <getKeyInput+0x76>
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2b02      	cmp	r3, #2
 80001d6:	dc2a      	bgt.n	800022e <getKeyInput+0x8e>
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d003      	beq.n	80001e6 <getKeyInput+0x46>
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d00c      	beq.n	80001fe <getKeyInput+0x5e>
 80001e4:	e023      	b.n	800022e <getKeyInput+0x8e>
		case 0:
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port,BUTTON0_Pin);
 80001e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ea:	483e      	ldr	r0, [pc, #248]	; (80002e4 <getKeyInput+0x144>)
 80001ec:	f001 fdaa 	bl	8001d44 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4619      	mov	r1, r3
 80001f4:	4a3a      	ldr	r2, [pc, #232]	; (80002e0 <getKeyInput+0x140>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001fc:	e017      	b.n	800022e <getKeyInput+0x8e>
		case 1:
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,BUTTON1_Pin);
 80001fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000202:	4838      	ldr	r0, [pc, #224]	; (80002e4 <getKeyInput+0x144>)
 8000204:	f001 fd9e 	bl	8001d44 <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	4619      	mov	r1, r3
 800020c:	4a34      	ldr	r2, [pc, #208]	; (80002e0 <getKeyInput+0x140>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000214:	e00b      	b.n	800022e <getKeyInput+0x8e>
		case 2:
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port,BUTTON2_Pin);
 8000216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800021a:	4832      	ldr	r0, [pc, #200]	; (80002e4 <getKeyInput+0x144>)
 800021c:	f001 fd92 	bl	8001d44 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	4619      	mov	r1, r3
 8000224:	4a2e      	ldr	r2, [pc, #184]	; (80002e0 <getKeyInput+0x140>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800022c:	bf00      	nop
		}
		if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i])){
 800022e:	4a2b      	ldr	r2, [pc, #172]	; (80002dc <getKeyInput+0x13c>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000236:	4928      	ldr	r1, [pc, #160]	; (80002d8 <getKeyInput+0x138>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023e:	429a      	cmp	r2, r3
 8000240:	d13e      	bne.n	80002c0 <getKeyInput+0x120>
 8000242:	4a25      	ldr	r2, [pc, #148]	; (80002d8 <getKeyInput+0x138>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	4925      	ldr	r1, [pc, #148]	; (80002e0 <getKeyInput+0x140>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000252:	429a      	cmp	r2, r3
 8000254:	d134      	bne.n	80002c0 <getKeyInput+0x120>
			if(keyReg3[i] != keyReg2[i]){
 8000256:	4a24      	ldr	r2, [pc, #144]	; (80002e8 <getKeyInput+0x148>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4920      	ldr	r1, [pc, #128]	; (80002e0 <getKeyInput+0x140>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d016      	beq.n	8000298 <getKeyInput+0xf8>
				keyReg3[i] = keyReg2[i];
 800026a:	4a1d      	ldr	r2, [pc, #116]	; (80002e0 <getKeyInput+0x140>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000272:	491d      	ldr	r1, [pc, #116]	; (80002e8 <getKeyInput+0x148>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(keyReg2[i] == PRESSED_STATE){
 800027a:	4a19      	ldr	r2, [pc, #100]	; (80002e0 <getKeyInput+0x140>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d11c      	bne.n	80002c0 <getKeyInput+0x120>
					subKeyProcess(i);
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f7ff ff7a 	bl	8000180 <subKeyProcess>
					TimeForKeyPress[i] = 200;
 800028c:	4a17      	ldr	r2, [pc, #92]	; (80002ec <getKeyInput+0x14c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	21c8      	movs	r1, #200	; 0xc8
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000296:	e013      	b.n	80002c0 <getKeyInput+0x120>
				}
			}
			else{
				TimeForKeyPress[i]--;
 8000298:	4a14      	ldr	r2, [pc, #80]	; (80002ec <getKeyInput+0x14c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a0:	1e5a      	subs	r2, r3, #1
 80002a2:	4912      	ldr	r1, [pc, #72]	; (80002ec <getKeyInput+0x14c>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimeForKeyPress[i] == 0){
 80002aa:	4a10      	ldr	r2, [pc, #64]	; (80002ec <getKeyInput+0x14c>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d104      	bne.n	80002c0 <getKeyInput+0x120>
					keyReg3[i] = NORMAL_STATE;
 80002b6:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <getKeyInput+0x148>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2101      	movs	r1, #1
 80002bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 3; i++){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	f77f af6f 	ble.w	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	2000000c 	.word	0x2000000c
 80002dc:	20000000 	.word	0x20000000
 80002e0:	20000018 	.word	0x20000018
 80002e4:	40011000 	.word	0x40011000
 80002e8:	20000024 	.word	0x20000024
 80002ec:	20000030 	.word	0x20000030

080002f0 <fsm_automatic_run>:
 *      Author: Fung
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 80002f4:	4b92      	ldr	r3, [pc, #584]	; (8000540 <fsm_automatic_run+0x250>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d113      	bne.n	8000324 <fsm_automatic_run+0x34>
	setTimer3(25);
 80002fc:	2019      	movs	r0, #25
 80002fe:	f001 f87b 	bl	80013f8 <setTimer3>
	update7SEG(index_led);
 8000302:	4b90      	ldr	r3, [pc, #576]	; (8000544 <fsm_automatic_run+0x254>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fca0 	bl	8000c4c <update7SEG>
	index_led = (index_led + 1) % 4;
 800030c:	4b8d      	ldr	r3, [pc, #564]	; (8000544 <fsm_automatic_run+0x254>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	425a      	negs	r2, r3
 8000314:	f003 0303 	and.w	r3, r3, #3
 8000318:	f002 0203 	and.w	r2, r2, #3
 800031c:	bf58      	it	pl
 800031e:	4253      	negpl	r3, r2
 8000320:	4a88      	ldr	r2, [pc, #544]	; (8000544 <fsm_automatic_run+0x254>)
 8000322:	6013      	str	r3, [r2, #0]
	}
	switch(status){
 8000324:	4b88      	ldr	r3, [pc, #544]	; (8000548 <fsm_automatic_run+0x258>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	2b04      	cmp	r3, #4
 800032c:	f200 80fd 	bhi.w	800052a <fsm_automatic_run+0x23a>
 8000330:	a201      	add	r2, pc, #4	; (adr r2, 8000338 <fsm_automatic_run+0x48>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	0800034d 	.word	0x0800034d
 800033c:	08000375 	.word	0x08000375
 8000340:	080003e7 	.word	0x080003e7
 8000344:	08000451 	.word	0x08000451
 8000348:	080004c1 	.word	0x080004c1
		case INIT:
			duration_led_NS = red_duration;
 800034c:	4b7f      	ldr	r3, [pc, #508]	; (800054c <fsm_automatic_run+0x25c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a7f      	ldr	r2, [pc, #508]	; (8000550 <fsm_automatic_run+0x260>)
 8000352:	6013      	str	r3, [r2, #0]
			duration_led_EW = green_duration;
 8000354:	4b7f      	ldr	r3, [pc, #508]	; (8000554 <fsm_automatic_run+0x264>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a7f      	ldr	r2, [pc, #508]	; (8000558 <fsm_automatic_run+0x268>)
 800035a:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_NS_GREEN_EW;
 800035c:	4b7a      	ldr	r3, [pc, #488]	; (8000548 <fsm_automatic_run+0x258>)
 800035e:	2202      	movs	r2, #2
 8000360:	601a      	str	r2, [r3, #0]
			setTimer1(green_duration*100);
 8000362:	4b7c      	ldr	r3, [pc, #496]	; (8000554 <fsm_automatic_run+0x264>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2264      	movs	r2, #100	; 0x64
 8000368:	fb02 f303 	mul.w	r3, r2, r3
 800036c:	4618      	mov	r0, r3
 800036e:	f001 f81b 	bl	80013a8 <setTimer1>
			break;
 8000372:	e0e3      	b.n	800053c <fsm_automatic_run+0x24c>
		case AUTO_RED_NS_GREEN_EW:
			UpdateDisplayDownBuffer(duration_led_NS);
 8000374:	4b76      	ldr	r3, [pc, #472]	; (8000550 <fsm_automatic_run+0x260>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fcfd 	bl	8000d78 <UpdateDisplayDownBuffer>
			UpdateDisplayUpBuffer(duration_led_EW);
 800037e:	4b76      	ldr	r3, [pc, #472]	; (8000558 <fsm_automatic_run+0x268>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fd1c 	bl	8000dc0 <UpdateDisplayUpBuffer>
			onRed_NS();
 8000388:	f001 f968 	bl	800165c <onRed_NS>
			onGreen_EW();
 800038c:	f001 f9a2 	bl	80016d4 <onGreen_EW>
			time();
 8000390:	f001 f9ac 	bl	80016ec <time>
			if(timer1_flag == 1){
 8000394:	4b71      	ldr	r3, [pc, #452]	; (800055c <fsm_automatic_run+0x26c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d117      	bne.n	80003cc <fsm_automatic_run+0xdc>
				setTimer1(yellow_duration*100);
 800039c:	4b70      	ldr	r3, [pc, #448]	; (8000560 <fsm_automatic_run+0x270>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2264      	movs	r2, #100	; 0x64
 80003a2:	fb02 f303 	mul.w	r3, r2, r3
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fffe 	bl	80013a8 <setTimer1>
				duration_led_NS = red_duration - green_duration;
 80003ac:	4b67      	ldr	r3, [pc, #412]	; (800054c <fsm_automatic_run+0x25c>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	4b68      	ldr	r3, [pc, #416]	; (8000554 <fsm_automatic_run+0x264>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	1ad3      	subs	r3, r2, r3
 80003b6:	4a66      	ldr	r2, [pc, #408]	; (8000550 <fsm_automatic_run+0x260>)
 80003b8:	6013      	str	r3, [r2, #0]
				duration_led_EW = yellow_duration;
 80003ba:	4b69      	ldr	r3, [pc, #420]	; (8000560 <fsm_automatic_run+0x270>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a66      	ldr	r2, [pc, #408]	; (8000558 <fsm_automatic_run+0x268>)
 80003c0:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_NS_YELLOW_EW;
 80003c2:	4b61      	ldr	r3, [pc, #388]	; (8000548 <fsm_automatic_run+0x258>)
 80003c4:	2203      	movs	r2, #3
 80003c6:	601a      	str	r2, [r3, #0]
				clear_traffic_light();
 80003c8:	f001 f922 	bl	8001610 <clear_traffic_light>

			}
			if(isButtonPressed(0) == 1){
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff febd 	bl	800014c <isButtonPressed>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	f040 80aa 	bne.w	800052e <fsm_automatic_run+0x23e>
				clear_traffic_light();
 80003da:	f001 f919 	bl	8001610 <clear_traffic_light>
				status = MAN_MODE;
 80003de:	4b5a      	ldr	r3, [pc, #360]	; (8000548 <fsm_automatic_run+0x258>)
 80003e0:	220b      	movs	r2, #11
 80003e2:	601a      	str	r2, [r3, #0]
			}
			break;
 80003e4:	e0a3      	b.n	800052e <fsm_automatic_run+0x23e>
		case AUTO_RED_NS_YELLOW_EW:
			UpdateDisplayDownBuffer(duration_led_NS);
 80003e6:	4b5a      	ldr	r3, [pc, #360]	; (8000550 <fsm_automatic_run+0x260>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fcc4 	bl	8000d78 <UpdateDisplayDownBuffer>
			UpdateDisplayUpBuffer(duration_led_EW);
 80003f0:	4b59      	ldr	r3, [pc, #356]	; (8000558 <fsm_automatic_run+0x268>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fce3 	bl	8000dc0 <UpdateDisplayUpBuffer>
			onRed_NS();
 80003fa:	f001 f92f 	bl	800165c <onRed_NS>
			onYellow_EW();
 80003fe:	f001 f95d 	bl	80016bc <onYellow_EW>
			time();
 8000402:	f001 f973 	bl	80016ec <time>
			if(timer1_flag == 1){
 8000406:	4b55      	ldr	r3, [pc, #340]	; (800055c <fsm_automatic_run+0x26c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d114      	bne.n	8000438 <fsm_automatic_run+0x148>
				setTimer1(green_duration*100);
 800040e:	4b51      	ldr	r3, [pc, #324]	; (8000554 <fsm_automatic_run+0x264>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2264      	movs	r2, #100	; 0x64
 8000414:	fb02 f303 	mul.w	r3, r2, r3
 8000418:	4618      	mov	r0, r3
 800041a:	f000 ffc5 	bl	80013a8 <setTimer1>
				duration_led_NS = green_duration;
 800041e:	4b4d      	ldr	r3, [pc, #308]	; (8000554 <fsm_automatic_run+0x264>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a4b      	ldr	r2, [pc, #300]	; (8000550 <fsm_automatic_run+0x260>)
 8000424:	6013      	str	r3, [r2, #0]
				duration_led_EW = red_duration;
 8000426:	4b49      	ldr	r3, [pc, #292]	; (800054c <fsm_automatic_run+0x25c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a4b      	ldr	r2, [pc, #300]	; (8000558 <fsm_automatic_run+0x268>)
 800042c:	6013      	str	r3, [r2, #0]
				clear_traffic_light();
 800042e:	f001 f8ef 	bl	8001610 <clear_traffic_light>
				status = AUTO_GREEN_NS_RED_EW;
 8000432:	4b45      	ldr	r3, [pc, #276]	; (8000548 <fsm_automatic_run+0x258>)
 8000434:	2204      	movs	r2, #4
 8000436:	601a      	str	r2, [r3, #0]

			}
			if(isButtonPressed(0) == 1){
 8000438:	2000      	movs	r0, #0
 800043a:	f7ff fe87 	bl	800014c <isButtonPressed>
 800043e:	4603      	mov	r3, r0
 8000440:	2b01      	cmp	r3, #1
 8000442:	d176      	bne.n	8000532 <fsm_automatic_run+0x242>
				clear_traffic_light();
 8000444:	f001 f8e4 	bl	8001610 <clear_traffic_light>
				status = MAN_MODE;
 8000448:	4b3f      	ldr	r3, [pc, #252]	; (8000548 <fsm_automatic_run+0x258>)
 800044a:	220b      	movs	r2, #11
 800044c:	601a      	str	r2, [r3, #0]
			}
			break;
 800044e:	e070      	b.n	8000532 <fsm_automatic_run+0x242>
		case AUTO_GREEN_NS_RED_EW:
			UpdateDisplayDownBuffer(duration_led_NS);
 8000450:	4b3f      	ldr	r3, [pc, #252]	; (8000550 <fsm_automatic_run+0x260>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	f000 fc8f 	bl	8000d78 <UpdateDisplayDownBuffer>
			UpdateDisplayUpBuffer(duration_led_EW);
 800045a:	4b3f      	ldr	r3, [pc, #252]	; (8000558 <fsm_automatic_run+0x268>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fcae 	bl	8000dc0 <UpdateDisplayUpBuffer>
			onGreen_NS();
 8000464:	f001 f912 	bl	800168c <onGreen_NS>
			onRed_EW();
 8000468:	f001 f91c 	bl	80016a4 <onRed_EW>
			time();
 800046c:	f001 f93e 	bl	80016ec <time>
			if(timer1_flag == 1){
 8000470:	4b3a      	ldr	r3, [pc, #232]	; (800055c <fsm_automatic_run+0x26c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d117      	bne.n	80004a8 <fsm_automatic_run+0x1b8>
				setTimer1(yellow_duration*100);
 8000478:	4b39      	ldr	r3, [pc, #228]	; (8000560 <fsm_automatic_run+0x270>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2264      	movs	r2, #100	; 0x64
 800047e:	fb02 f303 	mul.w	r3, r2, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f000 ff90 	bl	80013a8 <setTimer1>
				duration_led_NS = yellow_duration;
 8000488:	4b35      	ldr	r3, [pc, #212]	; (8000560 <fsm_automatic_run+0x270>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a30      	ldr	r2, [pc, #192]	; (8000550 <fsm_automatic_run+0x260>)
 800048e:	6013      	str	r3, [r2, #0]
				duration_led_EW = red_duration - green_duration;
 8000490:	4b2e      	ldr	r3, [pc, #184]	; (800054c <fsm_automatic_run+0x25c>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <fsm_automatic_run+0x264>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	4a2f      	ldr	r2, [pc, #188]	; (8000558 <fsm_automatic_run+0x268>)
 800049c:	6013      	str	r3, [r2, #0]
				clear_traffic_light();
 800049e:	f001 f8b7 	bl	8001610 <clear_traffic_light>
				status = AUTO_YELLOW_NS_RED_EW;
 80004a2:	4b29      	ldr	r3, [pc, #164]	; (8000548 <fsm_automatic_run+0x258>)
 80004a4:	2205      	movs	r2, #5
 80004a6:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0) == 1){
 80004a8:	2000      	movs	r0, #0
 80004aa:	f7ff fe4f 	bl	800014c <isButtonPressed>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d140      	bne.n	8000536 <fsm_automatic_run+0x246>
				clear_traffic_light();
 80004b4:	f001 f8ac 	bl	8001610 <clear_traffic_light>
				status = MAN_MODE;
 80004b8:	4b23      	ldr	r3, [pc, #140]	; (8000548 <fsm_automatic_run+0x258>)
 80004ba:	220b      	movs	r2, #11
 80004bc:	601a      	str	r2, [r3, #0]
			}
			break;
 80004be:	e03a      	b.n	8000536 <fsm_automatic_run+0x246>
		case AUTO_YELLOW_NS_RED_EW:
			UpdateDisplayDownBuffer(duration_led_NS);
 80004c0:	4b23      	ldr	r3, [pc, #140]	; (8000550 <fsm_automatic_run+0x260>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 fc57 	bl	8000d78 <UpdateDisplayDownBuffer>
			UpdateDisplayUpBuffer(duration_led_EW);
 80004ca:	4b23      	ldr	r3, [pc, #140]	; (8000558 <fsm_automatic_run+0x268>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 fc76 	bl	8000dc0 <UpdateDisplayUpBuffer>
			onYellow_NS();
 80004d4:	f001 f8ce 	bl	8001674 <onYellow_NS>
			onRed_EW();
 80004d8:	f001 f8e4 	bl	80016a4 <onRed_EW>
			time();
 80004dc:	f001 f906 	bl	80016ec <time>
			if(timer1_flag == 1){
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <fsm_automatic_run+0x26c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d114      	bne.n	8000512 <fsm_automatic_run+0x222>
				setTimer1(green_duration*100);
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <fsm_automatic_run+0x264>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2264      	movs	r2, #100	; 0x64
 80004ee:	fb02 f303 	mul.w	r3, r2, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 ff58 	bl	80013a8 <setTimer1>
				duration_led_NS = red_duration;
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <fsm_automatic_run+0x25c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <fsm_automatic_run+0x260>)
 80004fe:	6013      	str	r3, [r2, #0]
				duration_led_EW = green_duration;
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <fsm_automatic_run+0x264>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a14      	ldr	r2, [pc, #80]	; (8000558 <fsm_automatic_run+0x268>)
 8000506:	6013      	str	r3, [r2, #0]
				clear_traffic_light();
 8000508:	f001 f882 	bl	8001610 <clear_traffic_light>
				status = AUTO_RED_NS_GREEN_EW;
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <fsm_automatic_run+0x258>)
 800050e:	2202      	movs	r2, #2
 8000510:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0) == 1){
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff fe1a 	bl	800014c <isButtonPressed>
 8000518:	4603      	mov	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	d10d      	bne.n	800053a <fsm_automatic_run+0x24a>
				clear_traffic_light();
 800051e:	f001 f877 	bl	8001610 <clear_traffic_light>
				status = MAN_MODE;
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <fsm_automatic_run+0x258>)
 8000524:	220b      	movs	r2, #11
 8000526:	601a      	str	r2, [r3, #0]
			}
			break;
 8000528:	e007      	b.n	800053a <fsm_automatic_run+0x24a>
		default:
			break;
 800052a:	bf00      	nop
 800052c:	e006      	b.n	800053c <fsm_automatic_run+0x24c>
			break;
 800052e:	bf00      	nop
 8000530:	e004      	b.n	800053c <fsm_automatic_run+0x24c>
			break;
 8000532:	bf00      	nop
 8000534:	e002      	b.n	800053c <fsm_automatic_run+0x24c>
			break;
 8000536:	bf00      	nop
 8000538:	e000      	b.n	800053c <fsm_automatic_run+0x24c>
			break;
 800053a:	bf00      	nop
	}
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000c8 	.word	0x200000c8
 8000544:	200000ac 	.word	0x200000ac
 8000548:	200000a8 	.word	0x200000a8
 800054c:	2000003c 	.word	0x2000003c
 8000550:	20000054 	.word	0x20000054
 8000554:	20000044 	.word	0x20000044
 8000558:	20000058 	.word	0x20000058
 800055c:	200000b8 	.word	0x200000b8
 8000560:	20000040 	.word	0x20000040

08000564 <fsm_manual_run>:
 */

#include "fsm_manual.h"

int first_access = 0;
void fsm_manual_run(){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000568:	4b71      	ldr	r3, [pc, #452]	; (8000730 <fsm_manual_run+0x1cc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d113      	bne.n	8000598 <fsm_manual_run+0x34>
		setTimer3(10);
 8000570:	200a      	movs	r0, #10
 8000572:	f000 ff41 	bl	80013f8 <setTimer3>
		update7SEG(index_led);
 8000576:	4b6f      	ldr	r3, [pc, #444]	; (8000734 <fsm_manual_run+0x1d0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fb66 	bl	8000c4c <update7SEG>
		index_led = (index_led + 1) % 4;
 8000580:	4b6c      	ldr	r3, [pc, #432]	; (8000734 <fsm_manual_run+0x1d0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	425a      	negs	r2, r3
 8000588:	f003 0303 	and.w	r3, r3, #3
 800058c:	f002 0203 	and.w	r2, r2, #3
 8000590:	bf58      	it	pl
 8000592:	4253      	negpl	r3, r2
 8000594:	4a67      	ldr	r2, [pc, #412]	; (8000734 <fsm_manual_run+0x1d0>)
 8000596:	6013      	str	r3, [r2, #0]
	}
	switch(status){
 8000598:	4b67      	ldr	r3, [pc, #412]	; (8000738 <fsm_manual_run+0x1d4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3b0b      	subs	r3, #11
 800059e:	2b03      	cmp	r3, #3
 80005a0:	f200 80bc 	bhi.w	800071c <fsm_manual_run+0x1b8>
 80005a4:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <fsm_manual_run+0x48>)
 80005a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005aa:	bf00      	nop
 80005ac:	080005bd 	.word	0x080005bd
 80005b0:	080005c9 	.word	0x080005c9
 80005b4:	0800063b 	.word	0x0800063b
 80005b8:	080006af 	.word	0x080006af
		case MAN_MODE:
			status = MAN_RED;
 80005bc:	4b5e      	ldr	r3, [pc, #376]	; (8000738 <fsm_manual_run+0x1d4>)
 80005be:	220c      	movs	r2, #12
 80005c0:	601a      	str	r2, [r3, #0]
			setTimer2(25);
 80005c2:	2019      	movs	r0, #25
 80005c4:	f000 ff04 	bl	80013d0 <setTimer2>
		case MAN_RED:
			mode_led = 1;
 80005c8:	4b5c      	ldr	r3, [pc, #368]	; (800073c <fsm_manual_run+0x1d8>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
			UpdateDisplayDownBuffer(mode_led);
 80005ce:	4b5b      	ldr	r3, [pc, #364]	; (800073c <fsm_manual_run+0x1d8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fbd0 	bl	8000d78 <UpdateDisplayDownBuffer>
			if(first_access == 0){
 80005d8:	4b59      	ldr	r3, [pc, #356]	; (8000740 <fsm_manual_run+0x1dc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d10b      	bne.n	80005f8 <fsm_manual_run+0x94>
				UpdateDisplayUpBuffer(red_duration);
 80005e0:	4b58      	ldr	r3, [pc, #352]	; (8000744 <fsm_manual_run+0x1e0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fbeb 	bl	8000dc0 <UpdateDisplayUpBuffer>
				first_access = 1;
 80005ea:	4b55      	ldr	r3, [pc, #340]	; (8000740 <fsm_manual_run+0x1dc>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
				temp_red = red_duration;
 80005f0:	4b54      	ldr	r3, [pc, #336]	; (8000744 <fsm_manual_run+0x1e0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a54      	ldr	r2, [pc, #336]	; (8000748 <fsm_manual_run+0x1e4>)
 80005f6:	6013      	str	r3, [r2, #0]
			}
			if(timer2_flag == 1){
 80005f8:	4b54      	ldr	r3, [pc, #336]	; (800074c <fsm_manual_run+0x1e8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d10a      	bne.n	8000616 <fsm_manual_run+0xb2>
				setTimer2(25);
 8000600:	2019      	movs	r0, #25
 8000602:	f000 fee5 	bl	80013d0 <setTimer2>
				HAL_GPIO_TogglePin(RED_NS_GPIO_Port, RED_NS_Pin);
 8000606:	2110      	movs	r1, #16
 8000608:	4851      	ldr	r0, [pc, #324]	; (8000750 <fsm_manual_run+0x1ec>)
 800060a:	f001 fbca 	bl	8001da2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(RED_EW_GPIO_Port, RED_EW_Pin);
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	484f      	ldr	r0, [pc, #316]	; (8000750 <fsm_manual_run+0x1ec>)
 8000612:	f001 fbc6 	bl	8001da2 <HAL_GPIO_TogglePin>
			}
			if(isButtonPressed(0) == 1){
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff fd98 	bl	800014c <isButtonPressed>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d17e      	bne.n	8000720 <fsm_manual_run+0x1bc>
				clear_traffic_light();
 8000622:	f000 fff5 	bl	8001610 <clear_traffic_light>
				setTimer2(25);
 8000626:	2019      	movs	r0, #25
 8000628:	f000 fed2 	bl	80013d0 <setTimer2>
				first_access = 0;
 800062c:	4b44      	ldr	r3, [pc, #272]	; (8000740 <fsm_manual_run+0x1dc>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
				status = MAN_YELLOW;
 8000632:	4b41      	ldr	r3, [pc, #260]	; (8000738 <fsm_manual_run+0x1d4>)
 8000634:	220d      	movs	r2, #13
 8000636:	601a      	str	r2, [r3, #0]
			}
			break;
 8000638:	e072      	b.n	8000720 <fsm_manual_run+0x1bc>
		case MAN_YELLOW:
			mode_led = 2;
 800063a:	4b40      	ldr	r3, [pc, #256]	; (800073c <fsm_manual_run+0x1d8>)
 800063c:	2202      	movs	r2, #2
 800063e:	601a      	str	r2, [r3, #0]
			UpdateDisplayDownBuffer(mode_led);
 8000640:	4b3e      	ldr	r3, [pc, #248]	; (800073c <fsm_manual_run+0x1d8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fb97 	bl	8000d78 <UpdateDisplayDownBuffer>
			if(first_access == 0){
 800064a:	4b3d      	ldr	r3, [pc, #244]	; (8000740 <fsm_manual_run+0x1dc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d10b      	bne.n	800066a <fsm_manual_run+0x106>
				UpdateDisplayUpBuffer(yellow_duration);
 8000652:	4b40      	ldr	r3, [pc, #256]	; (8000754 <fsm_manual_run+0x1f0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fbb2 	bl	8000dc0 <UpdateDisplayUpBuffer>
				first_access = 1;
 800065c:	4b38      	ldr	r3, [pc, #224]	; (8000740 <fsm_manual_run+0x1dc>)
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
				temp_yellow = yellow_duration;
 8000662:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <fsm_manual_run+0x1f0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a3c      	ldr	r2, [pc, #240]	; (8000758 <fsm_manual_run+0x1f4>)
 8000668:	6013      	str	r3, [r2, #0]
			}
			if(timer2_flag == 1){
 800066a:	4b38      	ldr	r3, [pc, #224]	; (800074c <fsm_manual_run+0x1e8>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d10b      	bne.n	800068a <fsm_manual_run+0x126>
				setTimer2(25);
 8000672:	2019      	movs	r0, #25
 8000674:	f000 feac 	bl	80013d0 <setTimer2>
				HAL_GPIO_TogglePin(YELLOW_NS_GPIO_Port, YELLOW_NS_Pin);
 8000678:	2120      	movs	r1, #32
 800067a:	4835      	ldr	r0, [pc, #212]	; (8000750 <fsm_manual_run+0x1ec>)
 800067c:	f001 fb91 	bl	8001da2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(YELLOW_EW_GPIO_Port, YELLOW_EW_Pin);
 8000680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000684:	4832      	ldr	r0, [pc, #200]	; (8000750 <fsm_manual_run+0x1ec>)
 8000686:	f001 fb8c 	bl	8001da2 <HAL_GPIO_TogglePin>
			}
			if(isButtonPressed(0) == 1){
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff fd5e 	bl	800014c <isButtonPressed>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d146      	bne.n	8000724 <fsm_manual_run+0x1c0>
				clear_traffic_light();
 8000696:	f000 ffbb 	bl	8001610 <clear_traffic_light>
				setTimer2(25);
 800069a:	2019      	movs	r0, #25
 800069c:	f000 fe98 	bl	80013d0 <setTimer2>
				first_access = 0;
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <fsm_manual_run+0x1dc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
				status = MAN_GREEN;
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <fsm_manual_run+0x1d4>)
 80006a8:	220e      	movs	r2, #14
 80006aa:	601a      	str	r2, [r3, #0]
			}
			break;
 80006ac:	e03a      	b.n	8000724 <fsm_manual_run+0x1c0>
		case MAN_GREEN:
			mode_led = 3;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <fsm_manual_run+0x1d8>)
 80006b0:	2203      	movs	r2, #3
 80006b2:	601a      	str	r2, [r3, #0]
			UpdateDisplayDownBuffer(mode_led);
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <fsm_manual_run+0x1d8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fb5d 	bl	8000d78 <UpdateDisplayDownBuffer>
			if(first_access == 0){
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <fsm_manual_run+0x1dc>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d10b      	bne.n	80006de <fsm_manual_run+0x17a>
				UpdateDisplayUpBuffer(green_duration);
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <fsm_manual_run+0x1f8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fb78 	bl	8000dc0 <UpdateDisplayUpBuffer>
				first_access = 1;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <fsm_manual_run+0x1dc>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
				temp_green = green_duration;
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <fsm_manual_run+0x1f8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a21      	ldr	r2, [pc, #132]	; (8000760 <fsm_manual_run+0x1fc>)
 80006dc:	6013      	str	r3, [r2, #0]
			}
			if(timer2_flag == 1){
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <fsm_manual_run+0x1e8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d10b      	bne.n	80006fe <fsm_manual_run+0x19a>
				setTimer2(25);
 80006e6:	2019      	movs	r0, #25
 80006e8:	f000 fe72 	bl	80013d0 <setTimer2>
				HAL_GPIO_TogglePin(GREEN_NS_GPIO_Port, GREEN_NS_Pin);
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	4818      	ldr	r0, [pc, #96]	; (8000750 <fsm_manual_run+0x1ec>)
 80006f0:	f001 fb57 	bl	8001da2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GREEN_EW_GPIO_Port, GREEN_EW_Pin);
 80006f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f8:	4815      	ldr	r0, [pc, #84]	; (8000750 <fsm_manual_run+0x1ec>)
 80006fa:	f001 fb52 	bl	8001da2 <HAL_GPIO_TogglePin>
			}
			if(isButtonPressed(0) == 1){
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff fd24 	bl	800014c <isButtonPressed>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d10e      	bne.n	8000728 <fsm_manual_run+0x1c4>
				clear_traffic_light();
 800070a:	f000 ff81 	bl	8001610 <clear_traffic_light>
				first_access = 0;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <fsm_manual_run+0x1dc>)
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
				status = INIT;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <fsm_manual_run+0x1d4>)
 8000716:	2201      	movs	r2, #1
 8000718:	601a      	str	r2, [r3, #0]
			}
			break;
 800071a:	e005      	b.n	8000728 <fsm_manual_run+0x1c4>
		default:
			break;
 800071c:	bf00      	nop
 800071e:	e004      	b.n	800072a <fsm_manual_run+0x1c6>
			break;
 8000720:	bf00      	nop
 8000722:	e002      	b.n	800072a <fsm_manual_run+0x1c6>
			break;
 8000724:	bf00      	nop
 8000726:	e000      	b.n	800072a <fsm_manual_run+0x1c6>
			break;
 8000728:	bf00      	nop
	}
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000c8 	.word	0x200000c8
 8000734:	200000ac 	.word	0x200000ac
 8000738:	200000a8 	.word	0x200000a8
 800073c:	2000005c 	.word	0x2000005c
 8000740:	200000a4 	.word	0x200000a4
 8000744:	2000003c 	.word	0x2000003c
 8000748:	20000048 	.word	0x20000048
 800074c:	200000c0 	.word	0x200000c0
 8000750:	40010800 	.word	0x40010800
 8000754:	20000040 	.word	0x20000040
 8000758:	2000004c 	.word	0x2000004c
 800075c:	20000044 	.word	0x20000044
 8000760:	20000050 	.word	0x20000050

08000764 <fsm_setting_run>:
 */

#include "fsm_setting.h"


void fsm_setting_run(){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000768:	4b66      	ldr	r3, [pc, #408]	; (8000904 <fsm_setting_run+0x1a0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d113      	bne.n	8000798 <fsm_setting_run+0x34>
		setTimer3(10);
 8000770:	200a      	movs	r0, #10
 8000772:	f000 fe41 	bl	80013f8 <setTimer3>
		update7SEG(index_led);
 8000776:	4b64      	ldr	r3, [pc, #400]	; (8000908 <fsm_setting_run+0x1a4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fa66 	bl	8000c4c <update7SEG>
		index_led = (index_led + 1) % 4;
 8000780:	4b61      	ldr	r3, [pc, #388]	; (8000908 <fsm_setting_run+0x1a4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	425a      	negs	r2, r3
 8000788:	f003 0303 	and.w	r3, r3, #3
 800078c:	f002 0203 	and.w	r2, r2, #3
 8000790:	bf58      	it	pl
 8000792:	4253      	negpl	r3, r2
 8000794:	4a5c      	ldr	r2, [pc, #368]	; (8000908 <fsm_setting_run+0x1a4>)
 8000796:	6013      	str	r3, [r2, #0]
	}
	switch(status){
 8000798:	4b5c      	ldr	r3, [pc, #368]	; (800090c <fsm_setting_run+0x1a8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b0e      	cmp	r3, #14
 800079e:	d074      	beq.n	800088a <fsm_setting_run+0x126>
 80007a0:	2b0e      	cmp	r3, #14
 80007a2:	f300 80a6 	bgt.w	80008f2 <fsm_setting_run+0x18e>
 80007a6:	2b0c      	cmp	r3, #12
 80007a8:	d002      	beq.n	80007b0 <fsm_setting_run+0x4c>
 80007aa:	2b0d      	cmp	r3, #13
 80007ac:	d034      	beq.n	8000818 <fsm_setting_run+0xb4>
			red_duration = green_duration + yellow_duration;
			UpdateDisplayUpBuffer(green_duration);
		}
		break;
	default:
		break;
 80007ae:	e0a0      	b.n	80008f2 <fsm_setting_run+0x18e>
		UpdateDisplayDownBuffer(mode_led);
 80007b0:	4b57      	ldr	r3, [pc, #348]	; (8000910 <fsm_setting_run+0x1ac>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fadf 	bl	8000d78 <UpdateDisplayDownBuffer>
		if(isButtonPressed(1) == 1){
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fcc6 	bl	800014c <isButtonPressed>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d111      	bne.n	80007ea <fsm_setting_run+0x86>
			temp_red++;
 80007c6:	4b53      	ldr	r3, [pc, #332]	; (8000914 <fsm_setting_run+0x1b0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	4a51      	ldr	r2, [pc, #324]	; (8000914 <fsm_setting_run+0x1b0>)
 80007ce:	6013      	str	r3, [r2, #0]
			if(temp_red >= 100){
 80007d0:	4b50      	ldr	r3, [pc, #320]	; (8000914 <fsm_setting_run+0x1b0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b63      	cmp	r3, #99	; 0x63
 80007d6:	dd03      	ble.n	80007e0 <fsm_setting_run+0x7c>
				temp_red = red_duration;
 80007d8:	4b4f      	ldr	r3, [pc, #316]	; (8000918 <fsm_setting_run+0x1b4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a4d      	ldr	r2, [pc, #308]	; (8000914 <fsm_setting_run+0x1b0>)
 80007de:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(temp_red);
 80007e0:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <fsm_setting_run+0x1b0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 faeb 	bl	8000dc0 <UpdateDisplayUpBuffer>
		if(isButtonPressed(2) == 1){
 80007ea:	2002      	movs	r0, #2
 80007ec:	f7ff fcae 	bl	800014c <isButtonPressed>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d17f      	bne.n	80008f6 <fsm_setting_run+0x192>
			red_duration = temp_red;
 80007f6:	4b47      	ldr	r3, [pc, #284]	; (8000914 <fsm_setting_run+0x1b0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a47      	ldr	r2, [pc, #284]	; (8000918 <fsm_setting_run+0x1b4>)
 80007fc:	6013      	str	r3, [r2, #0]
			green_duration = red_duration - yellow_duration;
 80007fe:	4b46      	ldr	r3, [pc, #280]	; (8000918 <fsm_setting_run+0x1b4>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b46      	ldr	r3, [pc, #280]	; (800091c <fsm_setting_run+0x1b8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	4a45      	ldr	r2, [pc, #276]	; (8000920 <fsm_setting_run+0x1bc>)
 800080a:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(red_duration);
 800080c:	4b42      	ldr	r3, [pc, #264]	; (8000918 <fsm_setting_run+0x1b4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fad5 	bl	8000dc0 <UpdateDisplayUpBuffer>
		break;
 8000816:	e06e      	b.n	80008f6 <fsm_setting_run+0x192>
		UpdateDisplayDownBuffer(mode_led);
 8000818:	4b3d      	ldr	r3, [pc, #244]	; (8000910 <fsm_setting_run+0x1ac>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 faab 	bl	8000d78 <UpdateDisplayDownBuffer>
		if(isButtonPressed(1) == 1){
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff fc92 	bl	800014c <isButtonPressed>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	d111      	bne.n	8000852 <fsm_setting_run+0xee>
			temp_yellow++;
 800082e:	4b3d      	ldr	r3, [pc, #244]	; (8000924 <fsm_setting_run+0x1c0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	4a3b      	ldr	r2, [pc, #236]	; (8000924 <fsm_setting_run+0x1c0>)
 8000836:	6013      	str	r3, [r2, #0]
			if(temp_yellow >= 100){
 8000838:	4b3a      	ldr	r3, [pc, #232]	; (8000924 <fsm_setting_run+0x1c0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b63      	cmp	r3, #99	; 0x63
 800083e:	dd03      	ble.n	8000848 <fsm_setting_run+0xe4>
				temp_yellow = yellow_duration;
 8000840:	4b36      	ldr	r3, [pc, #216]	; (800091c <fsm_setting_run+0x1b8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a37      	ldr	r2, [pc, #220]	; (8000924 <fsm_setting_run+0x1c0>)
 8000846:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(temp_yellow);
 8000848:	4b36      	ldr	r3, [pc, #216]	; (8000924 <fsm_setting_run+0x1c0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fab7 	bl	8000dc0 <UpdateDisplayUpBuffer>
		if(isButtonPressed(2) == 1){
 8000852:	2002      	movs	r0, #2
 8000854:	f7ff fc7a 	bl	800014c <isButtonPressed>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d14d      	bne.n	80008fa <fsm_setting_run+0x196>
			UpdateDisplayUpBuffer(temp_yellow);
 800085e:	4b31      	ldr	r3, [pc, #196]	; (8000924 <fsm_setting_run+0x1c0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f000 faac 	bl	8000dc0 <UpdateDisplayUpBuffer>
			yellow_duration = temp_yellow;
 8000868:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <fsm_setting_run+0x1c0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a2b      	ldr	r2, [pc, #172]	; (800091c <fsm_setting_run+0x1b8>)
 800086e:	6013      	str	r3, [r2, #0]
			red_duration = yellow_duration + green_duration;
 8000870:	4b2a      	ldr	r3, [pc, #168]	; (800091c <fsm_setting_run+0x1b8>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <fsm_setting_run+0x1bc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4413      	add	r3, r2
 800087a:	4a27      	ldr	r2, [pc, #156]	; (8000918 <fsm_setting_run+0x1b4>)
 800087c:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(yellow_duration);
 800087e:	4b27      	ldr	r3, [pc, #156]	; (800091c <fsm_setting_run+0x1b8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fa9c 	bl	8000dc0 <UpdateDisplayUpBuffer>
		break;
 8000888:	e037      	b.n	80008fa <fsm_setting_run+0x196>
		UpdateDisplayDownBuffer(mode_led);
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <fsm_setting_run+0x1ac>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fa72 	bl	8000d78 <UpdateDisplayDownBuffer>
		if(isButtonPressed(1) == 1){
 8000894:	2001      	movs	r0, #1
 8000896:	f7ff fc59 	bl	800014c <isButtonPressed>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d111      	bne.n	80008c4 <fsm_setting_run+0x160>
			temp_green++;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <fsm_setting_run+0x1c4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a20      	ldr	r2, [pc, #128]	; (8000928 <fsm_setting_run+0x1c4>)
 80008a8:	6013      	str	r3, [r2, #0]
			if(temp_green >= 100){
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <fsm_setting_run+0x1c4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b63      	cmp	r3, #99	; 0x63
 80008b0:	dd03      	ble.n	80008ba <fsm_setting_run+0x156>
			temp_green = green_duration;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <fsm_setting_run+0x1bc>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <fsm_setting_run+0x1c4>)
 80008b8:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(temp_green);
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <fsm_setting_run+0x1c4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fa7e 	bl	8000dc0 <UpdateDisplayUpBuffer>
		if(isButtonPressed(2) == 1){
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff fc41 	bl	800014c <isButtonPressed>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d116      	bne.n	80008fe <fsm_setting_run+0x19a>
			green_duration = temp_green;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <fsm_setting_run+0x1c4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a12      	ldr	r2, [pc, #72]	; (8000920 <fsm_setting_run+0x1bc>)
 80008d6:	6013      	str	r3, [r2, #0]
			red_duration = green_duration + yellow_duration;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <fsm_setting_run+0x1bc>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <fsm_setting_run+0x1b8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <fsm_setting_run+0x1b4>)
 80008e4:	6013      	str	r3, [r2, #0]
			UpdateDisplayUpBuffer(green_duration);
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <fsm_setting_run+0x1bc>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fa68 	bl	8000dc0 <UpdateDisplayUpBuffer>
		break;
 80008f0:	e005      	b.n	80008fe <fsm_setting_run+0x19a>
		break;
 80008f2:	bf00      	nop
 80008f4:	e004      	b.n	8000900 <fsm_setting_run+0x19c>
		break;
 80008f6:	bf00      	nop
 80008f8:	e002      	b.n	8000900 <fsm_setting_run+0x19c>
		break;
 80008fa:	bf00      	nop
 80008fc:	e000      	b.n	8000900 <fsm_setting_run+0x19c>
		break;
 80008fe:	bf00      	nop
	}
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000c8 	.word	0x200000c8
 8000908:	200000ac 	.word	0x200000ac
 800090c:	200000a8 	.word	0x200000a8
 8000910:	2000005c 	.word	0x2000005c
 8000914:	20000048 	.word	0x20000048
 8000918:	2000003c 	.word	0x2000003c
 800091c:	20000040 	.word	0x20000040
 8000920:	20000044 	.word	0x20000044
 8000924:	2000004c 	.word	0x2000004c
 8000928:	20000050 	.word	0x20000050

0800092c <display7SEG>:
 *  Created on: Oct 28, 2024
 *      Author: Fung
 */

#include "led7_segment.h"
void display7SEG(int num){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b09      	cmp	r3, #9
 8000938:	f200 8180 	bhi.w	8000c3c <display7SEG+0x310>
 800093c:	a201      	add	r2, pc, #4	; (adr r2, 8000944 <display7SEG+0x18>)
 800093e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000942:	bf00      	nop
 8000944:	0800096d 	.word	0x0800096d
 8000948:	080009b5 	.word	0x080009b5
 800094c:	080009fd 	.word	0x080009fd
 8000950:	08000a45 	.word	0x08000a45
 8000954:	08000a8d 	.word	0x08000a8d
 8000958:	08000ad5 	.word	0x08000ad5
 800095c:	08000b1d 	.word	0x08000b1d
 8000960:	08000b65 	.word	0x08000b65
 8000964:	08000bad 	.word	0x08000bad
 8000968:	08000bf5 	.word	0x08000bf5
	 switch (num)
			  {
			  case 0:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2101      	movs	r1, #1
 8000970:	48b5      	ldr	r0, [pc, #724]	; (8000c48 <display7SEG+0x31c>)
 8000972:	f001 f9fe 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2102      	movs	r1, #2
 800097a:	48b3      	ldr	r0, [pc, #716]	; (8000c48 <display7SEG+0x31c>)
 800097c:	f001 f9f9 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2104      	movs	r1, #4
 8000984:	48b0      	ldr	r0, [pc, #704]	; (8000c48 <display7SEG+0x31c>)
 8000986:	f001 f9f4 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2108      	movs	r1, #8
 800098e:	48ae      	ldr	r0, [pc, #696]	; (8000c48 <display7SEG+0x31c>)
 8000990:	f001 f9ef 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2110      	movs	r1, #16
 8000998:	48ab      	ldr	r0, [pc, #684]	; (8000c48 <display7SEG+0x31c>)
 800099a:	f001 f9ea 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	48a9      	ldr	r0, [pc, #676]	; (8000c48 <display7SEG+0x31c>)
 80009a4:	f001 f9e5 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	48a6      	ldr	r0, [pc, #664]	; (8000c48 <display7SEG+0x31c>)
 80009ae:	f001 f9e0 	bl	8001d72 <HAL_GPIO_WritePin>
				  break;
 80009b2:	e144      	b.n	8000c3e <display7SEG+0x312>
			  case 1:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2101      	movs	r1, #1
 80009b8:	48a3      	ldr	r0, [pc, #652]	; (8000c48 <display7SEG+0x31c>)
 80009ba:	f001 f9da 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2102      	movs	r1, #2
 80009c2:	48a1      	ldr	r0, [pc, #644]	; (8000c48 <display7SEG+0x31c>)
 80009c4:	f001 f9d5 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2104      	movs	r1, #4
 80009cc:	489e      	ldr	r0, [pc, #632]	; (8000c48 <display7SEG+0x31c>)
 80009ce:	f001 f9d0 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2108      	movs	r1, #8
 80009d6:	489c      	ldr	r0, [pc, #624]	; (8000c48 <display7SEG+0x31c>)
 80009d8:	f001 f9cb 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2110      	movs	r1, #16
 80009e0:	4899      	ldr	r0, [pc, #612]	; (8000c48 <display7SEG+0x31c>)
 80009e2:	f001 f9c6 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	2120      	movs	r1, #32
 80009ea:	4897      	ldr	r0, [pc, #604]	; (8000c48 <display7SEG+0x31c>)
 80009ec:	f001 f9c1 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2140      	movs	r1, #64	; 0x40
 80009f4:	4894      	ldr	r0, [pc, #592]	; (8000c48 <display7SEG+0x31c>)
 80009f6:	f001 f9bc 	bl	8001d72 <HAL_GPIO_WritePin>
				  break;
 80009fa:	e120      	b.n	8000c3e <display7SEG+0x312>
			  case 2:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2101      	movs	r1, #1
 8000a00:	4891      	ldr	r0, [pc, #580]	; (8000c48 <display7SEG+0x31c>)
 8000a02:	f001 f9b6 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2102      	movs	r1, #2
 8000a0a:	488f      	ldr	r0, [pc, #572]	; (8000c48 <display7SEG+0x31c>)
 8000a0c:	f001 f9b1 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2104      	movs	r1, #4
 8000a14:	488c      	ldr	r0, [pc, #560]	; (8000c48 <display7SEG+0x31c>)
 8000a16:	f001 f9ac 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	488a      	ldr	r0, [pc, #552]	; (8000c48 <display7SEG+0x31c>)
 8000a20:	f001 f9a7 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2110      	movs	r1, #16
 8000a28:	4887      	ldr	r0, [pc, #540]	; (8000c48 <display7SEG+0x31c>)
 8000a2a:	f001 f9a2 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2120      	movs	r1, #32
 8000a32:	4885      	ldr	r0, [pc, #532]	; (8000c48 <display7SEG+0x31c>)
 8000a34:	f001 f99d 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2140      	movs	r1, #64	; 0x40
 8000a3c:	4882      	ldr	r0, [pc, #520]	; (8000c48 <display7SEG+0x31c>)
 8000a3e:	f001 f998 	bl	8001d72 <HAL_GPIO_WritePin>
				  break;
 8000a42:	e0fc      	b.n	8000c3e <display7SEG+0x312>
			  case 3:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2101      	movs	r1, #1
 8000a48:	487f      	ldr	r0, [pc, #508]	; (8000c48 <display7SEG+0x31c>)
 8000a4a:	f001 f992 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2102      	movs	r1, #2
 8000a52:	487d      	ldr	r0, [pc, #500]	; (8000c48 <display7SEG+0x31c>)
 8000a54:	f001 f98d 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	487a      	ldr	r0, [pc, #488]	; (8000c48 <display7SEG+0x31c>)
 8000a5e:	f001 f988 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2108      	movs	r1, #8
 8000a66:	4878      	ldr	r0, [pc, #480]	; (8000c48 <display7SEG+0x31c>)
 8000a68:	f001 f983 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2110      	movs	r1, #16
 8000a70:	4875      	ldr	r0, [pc, #468]	; (8000c48 <display7SEG+0x31c>)
 8000a72:	f001 f97e 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2120      	movs	r1, #32
 8000a7a:	4873      	ldr	r0, [pc, #460]	; (8000c48 <display7SEG+0x31c>)
 8000a7c:	f001 f979 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	4870      	ldr	r0, [pc, #448]	; (8000c48 <display7SEG+0x31c>)
 8000a86:	f001 f974 	bl	8001d72 <HAL_GPIO_WritePin>
				  break;
 8000a8a:	e0d8      	b.n	8000c3e <display7SEG+0x312>
			  case 4:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2101      	movs	r1, #1
 8000a90:	486d      	ldr	r0, [pc, #436]	; (8000c48 <display7SEG+0x31c>)
 8000a92:	f001 f96e 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2102      	movs	r1, #2
 8000a9a:	486b      	ldr	r0, [pc, #428]	; (8000c48 <display7SEG+0x31c>)
 8000a9c:	f001 f969 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	4868      	ldr	r0, [pc, #416]	; (8000c48 <display7SEG+0x31c>)
 8000aa6:	f001 f964 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2108      	movs	r1, #8
 8000aae:	4866      	ldr	r0, [pc, #408]	; (8000c48 <display7SEG+0x31c>)
 8000ab0:	f001 f95f 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	4863      	ldr	r0, [pc, #396]	; (8000c48 <display7SEG+0x31c>)
 8000aba:	f001 f95a 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	4861      	ldr	r0, [pc, #388]	; (8000c48 <display7SEG+0x31c>)
 8000ac4:	f001 f955 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	485e      	ldr	r0, [pc, #376]	; (8000c48 <display7SEG+0x31c>)
 8000ace:	f001 f950 	bl	8001d72 <HAL_GPIO_WritePin>
				  break;
 8000ad2:	e0b4      	b.n	8000c3e <display7SEG+0x312>
			  case 5:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	485b      	ldr	r0, [pc, #364]	; (8000c48 <display7SEG+0x31c>)
 8000ada:	f001 f94a 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4859      	ldr	r0, [pc, #356]	; (8000c48 <display7SEG+0x31c>)
 8000ae4:	f001 f945 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2104      	movs	r1, #4
 8000aec:	4856      	ldr	r0, [pc, #344]	; (8000c48 <display7SEG+0x31c>)
 8000aee:	f001 f940 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2108      	movs	r1, #8
 8000af6:	4854      	ldr	r0, [pc, #336]	; (8000c48 <display7SEG+0x31c>)
 8000af8:	f001 f93b 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2110      	movs	r1, #16
 8000b00:	4851      	ldr	r0, [pc, #324]	; (8000c48 <display7SEG+0x31c>)
 8000b02:	f001 f936 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2120      	movs	r1, #32
 8000b0a:	484f      	ldr	r0, [pc, #316]	; (8000c48 <display7SEG+0x31c>)
 8000b0c:	f001 f931 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2140      	movs	r1, #64	; 0x40
 8000b14:	484c      	ldr	r0, [pc, #304]	; (8000c48 <display7SEG+0x31c>)
 8000b16:	f001 f92c 	bl	8001d72 <HAL_GPIO_WritePin>
				  break;
 8000b1a:	e090      	b.n	8000c3e <display7SEG+0x312>
			  case 6:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4849      	ldr	r0, [pc, #292]	; (8000c48 <display7SEG+0x31c>)
 8000b22:	f001 f926 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2102      	movs	r1, #2
 8000b2a:	4847      	ldr	r0, [pc, #284]	; (8000c48 <display7SEG+0x31c>)
 8000b2c:	f001 f921 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2104      	movs	r1, #4
 8000b34:	4844      	ldr	r0, [pc, #272]	; (8000c48 <display7SEG+0x31c>)
 8000b36:	f001 f91c 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	4842      	ldr	r0, [pc, #264]	; (8000c48 <display7SEG+0x31c>)
 8000b40:	f001 f917 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2110      	movs	r1, #16
 8000b48:	483f      	ldr	r0, [pc, #252]	; (8000c48 <display7SEG+0x31c>)
 8000b4a:	f001 f912 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2120      	movs	r1, #32
 8000b52:	483d      	ldr	r0, [pc, #244]	; (8000c48 <display7SEG+0x31c>)
 8000b54:	f001 f90d 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2140      	movs	r1, #64	; 0x40
 8000b5c:	483a      	ldr	r0, [pc, #232]	; (8000c48 <display7SEG+0x31c>)
 8000b5e:	f001 f908 	bl	8001d72 <HAL_GPIO_WritePin>
				  break;
 8000b62:	e06c      	b.n	8000c3e <display7SEG+0x312>
			  case 7:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2101      	movs	r1, #1
 8000b68:	4837      	ldr	r0, [pc, #220]	; (8000c48 <display7SEG+0x31c>)
 8000b6a:	f001 f902 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2102      	movs	r1, #2
 8000b72:	4835      	ldr	r0, [pc, #212]	; (8000c48 <display7SEG+0x31c>)
 8000b74:	f001 f8fd 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	4832      	ldr	r0, [pc, #200]	; (8000c48 <display7SEG+0x31c>)
 8000b7e:	f001 f8f8 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2108      	movs	r1, #8
 8000b86:	4830      	ldr	r0, [pc, #192]	; (8000c48 <display7SEG+0x31c>)
 8000b88:	f001 f8f3 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	482d      	ldr	r0, [pc, #180]	; (8000c48 <display7SEG+0x31c>)
 8000b92:	f001 f8ee 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2120      	movs	r1, #32
 8000b9a:	482b      	ldr	r0, [pc, #172]	; (8000c48 <display7SEG+0x31c>)
 8000b9c:	f001 f8e9 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2140      	movs	r1, #64	; 0x40
 8000ba4:	4828      	ldr	r0, [pc, #160]	; (8000c48 <display7SEG+0x31c>)
 8000ba6:	f001 f8e4 	bl	8001d72 <HAL_GPIO_WritePin>
				  break;
 8000baa:	e048      	b.n	8000c3e <display7SEG+0x312>
			  case 8:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4825      	ldr	r0, [pc, #148]	; (8000c48 <display7SEG+0x31c>)
 8000bb2:	f001 f8de 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2102      	movs	r1, #2
 8000bba:	4823      	ldr	r0, [pc, #140]	; (8000c48 <display7SEG+0x31c>)
 8000bbc:	f001 f8d9 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4820      	ldr	r0, [pc, #128]	; (8000c48 <display7SEG+0x31c>)
 8000bc6:	f001 f8d4 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2108      	movs	r1, #8
 8000bce:	481e      	ldr	r0, [pc, #120]	; (8000c48 <display7SEG+0x31c>)
 8000bd0:	f001 f8cf 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	481b      	ldr	r0, [pc, #108]	; (8000c48 <display7SEG+0x31c>)
 8000bda:	f001 f8ca 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2120      	movs	r1, #32
 8000be2:	4819      	ldr	r0, [pc, #100]	; (8000c48 <display7SEG+0x31c>)
 8000be4:	f001 f8c5 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	4816      	ldr	r0, [pc, #88]	; (8000c48 <display7SEG+0x31c>)
 8000bee:	f001 f8c0 	bl	8001d72 <HAL_GPIO_WritePin>
				  break;
 8000bf2:	e024      	b.n	8000c3e <display7SEG+0x312>
			  case 9:
				  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4813      	ldr	r0, [pc, #76]	; (8000c48 <display7SEG+0x31c>)
 8000bfa:	f001 f8ba 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2102      	movs	r1, #2
 8000c02:	4811      	ldr	r0, [pc, #68]	; (8000c48 <display7SEG+0x31c>)
 8000c04:	f001 f8b5 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2104      	movs	r1, #4
 8000c0c:	480e      	ldr	r0, [pc, #56]	; (8000c48 <display7SEG+0x31c>)
 8000c0e:	f001 f8b0 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2108      	movs	r1, #8
 8000c16:	480c      	ldr	r0, [pc, #48]	; (8000c48 <display7SEG+0x31c>)
 8000c18:	f001 f8ab 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2110      	movs	r1, #16
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <display7SEG+0x31c>)
 8000c22:	f001 f8a6 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2120      	movs	r1, #32
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <display7SEG+0x31c>)
 8000c2c:	f001 f8a1 	bl	8001d72 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2140      	movs	r1, #64	; 0x40
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <display7SEG+0x31c>)
 8000c36:	f001 f89c 	bl	8001d72 <HAL_GPIO_WritePin>
				  break;
 8000c3a:	e000      	b.n	8000c3e <display7SEG+0x312>
			  default:
				  break;
 8000c3c:	bf00      	nop
			  }
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40010c00 	.word	0x40010c00

08000c4c <update7SEG>:


void update7SEG (int index){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	f200 8084 	bhi.w	8000d64 <update7SEG+0x118>
 8000c5c:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <update7SEG+0x18>)
 8000c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c62:	bf00      	nop
 8000c64:	08000c75 	.word	0x08000c75
 8000c68:	08000cb1 	.word	0x08000cb1
 8000c6c:	08000ced 	.word	0x08000ced
 8000c70:	08000d29 	.word	0x08000d29
	switch (index){
		case 0:
			HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7a:	483d      	ldr	r0, [pc, #244]	; (8000d70 <update7SEG+0x124>)
 8000c7c:	f001 f879 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c86:	483a      	ldr	r0, [pc, #232]	; (8000d70 <update7SEG+0x124>)
 8000c88:	f001 f873 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c92:	4837      	ldr	r0, [pc, #220]	; (8000d70 <update7SEG+0x124>)
 8000c94:	f001 f86d 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9e:	4834      	ldr	r0, [pc, #208]	; (8000d70 <update7SEG+0x124>)
 8000ca0:	f001 f867 	bl	8001d72 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000ca4:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <update7SEG+0x128>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fe3f 	bl	800092c <display7SEG>
			break;
 8000cae:	e05a      	b.n	8000d66 <update7SEG+0x11a>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb6:	482e      	ldr	r0, [pc, #184]	; (8000d70 <update7SEG+0x124>)
 8000cb8:	f001 f85b 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc2:	482b      	ldr	r0, [pc, #172]	; (8000d70 <update7SEG+0x124>)
 8000cc4:	f001 f855 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cce:	4828      	ldr	r0, [pc, #160]	; (8000d70 <update7SEG+0x124>)
 8000cd0:	f001 f84f 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cda:	4825      	ldr	r0, [pc, #148]	; (8000d70 <update7SEG+0x124>)
 8000cdc:	f001 f849 	bl	8001d72 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <update7SEG+0x128>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fe21 	bl	800092c <display7SEG>
			break;
 8000cea:	e03c      	b.n	8000d66 <update7SEG+0x11a>
		case 2:
			HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf2:	481f      	ldr	r0, [pc, #124]	; (8000d70 <update7SEG+0x124>)
 8000cf4:	f001 f83d 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cfe:	481c      	ldr	r0, [pc, #112]	; (8000d70 <update7SEG+0x124>)
 8000d00:	f001 f837 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0a:	4819      	ldr	r0, [pc, #100]	; (8000d70 <update7SEG+0x124>)
 8000d0c:	f001 f831 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d16:	4816      	ldr	r0, [pc, #88]	; (8000d70 <update7SEG+0x124>)
 8000d18:	f001 f82b 	bl	8001d72 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <update7SEG+0x128>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe03 	bl	800092c <display7SEG>
			break;
 8000d26:	e01e      	b.n	8000d66 <update7SEG+0x11a>
		case 3:
			HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d2e:	4810      	ldr	r0, [pc, #64]	; (8000d70 <update7SEG+0x124>)
 8000d30:	f001 f81f 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <update7SEG+0x124>)
 8000d3c:	f001 f819 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d46:	480a      	ldr	r0, [pc, #40]	; (8000d70 <update7SEG+0x124>)
 8000d48:	f001 f813 	bl	8001d72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <update7SEG+0x124>)
 8000d54:	f001 f80d 	bl	8001d72 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <update7SEG+0x128>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fde5 	bl	800092c <display7SEG>
			break;
 8000d62:	e000      	b.n	8000d66 <update7SEG+0x11a>
		default :
			break;
 8000d64:	bf00      	nop
	}
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40010800 	.word	0x40010800
 8000d74:	20000060 	.word	0x20000060

08000d78 <UpdateDisplayDownBuffer>:
 void UpdateDisplayDownBuffer(int display1){
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	 led_buffer[0] = display1 / 10;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <UpdateDisplayDownBuffer+0x40>)
 8000d84:	fb82 1203 	smull	r1, r2, r2, r3
 8000d88:	1092      	asrs	r2, r2, #2
 8000d8a:	17db      	asrs	r3, r3, #31
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <UpdateDisplayDownBuffer+0x44>)
 8000d90:	6013      	str	r3, [r2, #0]
	 led_buffer[1] = display1 % 10;
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <UpdateDisplayDownBuffer+0x40>)
 8000d96:	fb83 2301 	smull	r2, r3, r3, r1
 8000d9a:	109a      	asrs	r2, r3, #2
 8000d9c:	17cb      	asrs	r3, r1, #31
 8000d9e:	1ad2      	subs	r2, r2, r3
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	1aca      	subs	r2, r1, r3
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <UpdateDisplayDownBuffer+0x44>)
 8000dac:	605a      	str	r2, [r3, #4]

 }
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	66666667 	.word	0x66666667
 8000dbc:	20000060 	.word	0x20000060

08000dc0 <UpdateDisplayUpBuffer>:
 void UpdateDisplayUpBuffer(int display2){
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	 led_buffer[2] = display2 / 10;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <UpdateDisplayUpBuffer+0x40>)
 8000dcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd0:	1092      	asrs	r2, r2, #2
 8000dd2:	17db      	asrs	r3, r3, #31
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <UpdateDisplayUpBuffer+0x44>)
 8000dd8:	6093      	str	r3, [r2, #8]
	 led_buffer[3] = display2 % 10;
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <UpdateDisplayUpBuffer+0x40>)
 8000dde:	fb83 2301 	smull	r2, r3, r3, r1
 8000de2:	109a      	asrs	r2, r3, #2
 8000de4:	17cb      	asrs	r3, r1, #31
 8000de6:	1ad2      	subs	r2, r2, r3
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	1aca      	subs	r2, r1, r3
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <UpdateDisplayUpBuffer+0x44>)
 8000df4:	60da      	str	r2, [r3, #12]
 }
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	66666667 	.word	0x66666667
 8000e04:	20000060 	.word	0x20000060

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0c:	f000 fcb0 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f83c 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f000 f8c2 	bl	8000f9c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e18:	f000 f874 	bl	8000f04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT (& htim2 );
 8000e1c:	4814      	ldr	r0, [pc, #80]	; (8000e70 <main+0x68>)
 8000e1e:	f001 fc05 	bl	800262c <HAL_TIM_Base_Start_IT>
  status = INIT;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <main+0x6c>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
  setTimer3(10);
 8000e28:	200a      	movs	r0, #10
 8000e2a:	f000 fae5 	bl	80013f8 <setTimer3>
  setTimer4(100);
 8000e2e:	2064      	movs	r0, #100	; 0x64
 8000e30:	f000 faf6 	bl	8001420 <setTimer4>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000e34:	f000 f986 	bl	8001144 <SCH_Init>
  SCH_Add_Task(timerRun,0, 10);
 8000e38:	220a      	movs	r2, #10
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	480e      	ldr	r0, [pc, #56]	; (8000e78 <main+0x70>)
 8000e3e:	f000 fa57 	bl	80012f0 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput,0, 10);
 8000e42:	220a      	movs	r2, #10
 8000e44:	2100      	movs	r1, #0
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <main+0x74>)
 8000e48:	f000 fa52 	bl	80012f0 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 0, 10);
 8000e4c:	220a      	movs	r2, #10
 8000e4e:	2100      	movs	r1, #0
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <main+0x78>)
 8000e52:	f000 fa4d 	bl	80012f0 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 10);
 8000e56:	220a      	movs	r2, #10
 8000e58:	2100      	movs	r1, #0
 8000e5a:	480a      	ldr	r0, [pc, #40]	; (8000e84 <main+0x7c>)
 8000e5c:	f000 fa48 	bl	80012f0 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting_run, 0, 10);
 8000e60:	220a      	movs	r2, #10
 8000e62:	2100      	movs	r1, #0
 8000e64:	4808      	ldr	r0, [pc, #32]	; (8000e88 <main+0x80>)
 8000e66:	f000 fa43 	bl	80012f0 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000e6a:	f000 f9f7 	bl	800125c <SCH_Dispatch_Tasks>
 8000e6e:	e7fc      	b.n	8000e6a <main+0x62>
 8000e70:	200000d4 	.word	0x200000d4
 8000e74:	200000a8 	.word	0x200000a8
 8000e78:	08001449 	.word	0x08001449
 8000e7c:	080001a1 	.word	0x080001a1
 8000e80:	080002f1 	.word	0x080002f1
 8000e84:	08000565 	.word	0x08000565
 8000e88:	08000765 	.word	0x08000765

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b090      	sub	sp, #64	; 0x40
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0318 	add.w	r3, r7, #24
 8000e96:	2228      	movs	r2, #40	; 0x28
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 ff76 	bl	8002d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb6:	2310      	movs	r3, #16
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 ff86 	bl	8001dd4 <HAL_RCC_OscConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ece:	f000 f8df 	bl	8001090 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 f9f2 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 f8cb 	bl	8001090 <Error_Handler>
  }
}
 8000efa:	bf00      	nop
 8000efc:	3740      	adds	r7, #64	; 0x40
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f2a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f38:	2209      	movs	r2, #9
 8000f3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f48:	4813      	ldr	r0, [pc, #76]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f4a:	f001 fb1f 	bl	800258c <HAL_TIM_Base_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f54:	f000 f89c 	bl	8001090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f66:	f001 fc9d 	bl	80028a4 <HAL_TIM_ConfigClockSource>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f70:	f000 f88e 	bl	8001090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f82:	f001 fe75 	bl	8002c70 <HAL_TIMEx_MasterConfigSynchronization>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f8c:	f000 f880 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200000d4 	.word	0x200000d4

08000f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <MX_GPIO_Init+0xd0>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a2d      	ldr	r2, [pc, #180]	; (800106c <MX_GPIO_Init+0xd0>)
 8000fb6:	f043 0310 	orr.w	r3, r3, #16
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <MX_GPIO_Init+0xd0>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <MX_GPIO_Init+0xd0>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a27      	ldr	r2, [pc, #156]	; (800106c <MX_GPIO_Init+0xd0>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <MX_GPIO_Init+0xd0>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_GPIO_Init+0xd0>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <MX_GPIO_Init+0xd0>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_GPIO_Init+0xd0>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_NS_Pin|YELLOW_NS_Pin|GREEN_NS_Pin|RED_EW_Pin
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8000ffe:	481c      	ldr	r0, [pc, #112]	; (8001070 <MX_GPIO_Init+0xd4>)
 8001000:	f000 feb7 	bl	8001d72 <HAL_GPIO_WritePin>
                          |YELLOW_EW_Pin|GREEN_EW_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8001004:	2200      	movs	r2, #0
 8001006:	217f      	movs	r1, #127	; 0x7f
 8001008:	481a      	ldr	r0, [pc, #104]	; (8001074 <MX_GPIO_Init+0xd8>)
 800100a:	f000 feb2 	bl	8001d72 <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 800100e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001018:	2301      	movs	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	4815      	ldr	r0, [pc, #84]	; (8001078 <MX_GPIO_Init+0xdc>)
 8001024:	f000 fd14 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_NS_Pin YELLOW_NS_Pin GREEN_NS_Pin RED_EW_Pin
                           YELLOW_EW_Pin GREEN_EW_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_NS_Pin|YELLOW_NS_Pin|GREEN_NS_Pin|RED_EW_Pin
 8001028:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 800102c:	613b      	str	r3, [r7, #16]
                          |YELLOW_EW_Pin|GREEN_EW_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2302      	movs	r3, #2
 8001038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4619      	mov	r1, r3
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <MX_GPIO_Init+0xd4>)
 8001042:	f000 fd05 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8001046:	237f      	movs	r3, #127	; 0x7f
 8001048:	613b      	str	r3, [r7, #16]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2302      	movs	r3, #2
 8001054:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_GPIO_Init+0xd8>)
 800105e:	f000 fcf7 	bl	8001a50 <HAL_GPIO_Init>

}
 8001062:	bf00      	nop
 8001064:	3720      	adds	r7, #32
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	40010800 	.word	0x40010800
 8001074:	40010c00 	.word	0x40010c00
 8001078:	40011000 	.word	0x40011000

0800107c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001084:	f000 f87c 	bl	8001180 <SCH_Update>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
}
 8001096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001098:	e7fe      	b.n	8001098 <Error_Handler+0x8>
	...

0800109c <SCH_Delete_Task>:
#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
unsigned char Error_code_G = 0;

uint8_t SCH_Delete_Task(uint32_t TASK_INDEX){
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 	unsigned char Return_code;
 	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 80010a4:	491f      	ldr	r1, [pc, #124]	; (8001124 <SCH_Delete_Task+0x88>)
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d105      	bne.n	80010c4 <SCH_Delete_Task+0x28>
 		// No task at this location ...
 		//
 		// Set the global error variable
 		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <SCH_Delete_Task+0x8c>)
 80010ba:	2232      	movs	r2, #50	; 0x32
 80010bc:	701a      	strb	r2, [r3, #0]
 		// ... also return an error code
 		Return_code = RETURN_ERROR;
 80010be:	2333      	movs	r3, #51	; 0x33
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e001      	b.n	80010c8 <SCH_Delete_Task+0x2c>
 	} else {
 		Return_code = RETURN_NORMAL;
 80010c4:	2334      	movs	r3, #52	; 0x34
 80010c6:	73fb      	strb	r3, [r7, #15]
 	}
 	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 80010c8:	4916      	ldr	r1, [pc, #88]	; (8001124 <SCH_Delete_Task+0x88>)
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 	SCH_tasks_G[TASK_INDEX].Delay = 0;
 80010da:	4912      	ldr	r1, [pc, #72]	; (8001124 <SCH_Delete_Task+0x88>)
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	3304      	adds	r3, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 	SCH_tasks_G[TASK_INDEX].Period = 0;
 80010ee:	490d      	ldr	r1, [pc, #52]	; (8001124 <SCH_Delete_Task+0x88>)
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	3308      	adds	r3, #8
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <SCH_Delete_Task+0x88>)
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	330c      	adds	r3, #12
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
 	return Return_code;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 }
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000011c 	.word	0x2000011c
 8001128:	200000b0 	.word	0x200000b0

0800112c <Watchdog_init>:
void Watchdog_init(void){
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
 	//TODO
 }
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <Timer_init>:

 void Timer_init(void){
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
 	//TODO
 }
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <SCH_Init>:

 void SCH_Go_To_Sleep(void){
 	//TODO
 }

void SCH_Init(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 	unsigned char i ;
 	for (i = 0; i <SCH_MAX_TASKS; i++) {
 800114a:	2300      	movs	r3, #0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	e006      	b.n	800115e <SCH_Init+0x1a>
 		SCH_Delete_Task(i);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ffa2 	bl	800109c <SCH_Delete_Task>
 	for (i = 0; i <SCH_MAX_TASKS; i++) {
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	3301      	adds	r3, #1
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b27      	cmp	r3, #39	; 0x27
 8001162:	d9f5      	bls.n	8001150 <SCH_Init+0xc>
 	}
 	Error_code_G = 0;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SCH_Init+0x38>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
 	Timer_init();
 800116a:	f7ff ffe5 	bl	8001138 <Timer_init>
 	Watchdog_init();
 800116e:	f7ff ffdd 	bl	800112c <Watchdog_init>
 }
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000b0 	.word	0x200000b0

08001180 <SCH_Update>:
void SCH_Update(void){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 	unsigned char Index;
 	//NOTE: calculations are in *TICKS* (not milliseconds)
 	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	e05c      	b.n	8001246 <SCH_Update+0xc6>
 		// Check if there is a task at this location
 		if (SCH_tasks_G[Index].pTask){
 800118c:	79fa      	ldrb	r2, [r7, #7]
 800118e:	4932      	ldr	r1, [pc, #200]	; (8001258 <SCH_Update+0xd8>)
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d04f      	beq.n	8001240 <SCH_Update+0xc0>
 			if (SCH_tasks_G[Index].Delay == 0) {
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	492d      	ldr	r1, [pc, #180]	; (8001258 <SCH_Update+0xd8>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	3304      	adds	r3, #4
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d132      	bne.n	800121c <SCH_Update+0x9c>
 				// The task is due to run
 				// Inc. the ’RunMe’ flag
 				SCH_tasks_G[Index].RunMe+= 1;
 80011b6:	79fa      	ldrb	r2, [r7, #7]
 80011b8:	4927      	ldr	r1, [pc, #156]	; (8001258 <SCH_Update+0xd8>)
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	330c      	adds	r3, #12
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	79fa      	ldrb	r2, [r7, #7]
 80011ca:	3301      	adds	r3, #1
 80011cc:	b2d8      	uxtb	r0, r3
 80011ce:	4922      	ldr	r1, [pc, #136]	; (8001258 <SCH_Update+0xd8>)
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	330c      	adds	r3, #12
 80011dc:	4602      	mov	r2, r0
 80011de:	701a      	strb	r2, [r3, #0]
 				if (SCH_tasks_G[Index].Period) {
 80011e0:	79fa      	ldrb	r2, [r7, #7]
 80011e2:	491d      	ldr	r1, [pc, #116]	; (8001258 <SCH_Update+0xd8>)
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	3308      	adds	r3, #8
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d024      	beq.n	8001240 <SCH_Update+0xc0>
 					// Schedule periodic tasks to run again
 					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80011f6:	79f9      	ldrb	r1, [r7, #7]
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	4817      	ldr	r0, [pc, #92]	; (8001258 <SCH_Update+0xd8>)
 80011fc:	460b      	mov	r3, r1
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4403      	add	r3, r0
 8001206:	3308      	adds	r3, #8
 8001208:	6819      	ldr	r1, [r3, #0]
 800120a:	4813      	ldr	r0, [pc, #76]	; (8001258 <SCH_Update+0xd8>)
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4403      	add	r3, r0
 8001216:	3304      	adds	r3, #4
 8001218:	6019      	str	r1, [r3, #0]
 800121a:	e011      	b.n	8001240 <SCH_Update+0xc0>
 				}
 			} else {
 				// Not yet ready to run: just decrement the delay
 				SCH_tasks_G[Index].Delay --;
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	490e      	ldr	r1, [pc, #56]	; (8001258 <SCH_Update+0xd8>)
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	3304      	adds	r3, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1e59      	subs	r1, r3, #1
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <SCH_Update+0xd8>)
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4403      	add	r3, r0
 800123c:	3304      	adds	r3, #4
 800123e:	6019      	str	r1, [r3, #0]
 	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	3301      	adds	r3, #1
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b27      	cmp	r3, #39	; 0x27
 800124a:	d99f      	bls.n	800118c <SCH_Update+0xc>
 			}
 		}
 	}
 }
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	2000011c 	.word	0x2000011c

0800125c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 	unsigned char Index;
 	// Dispatches (runs) the next task (if one is ready)
 	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 8001262:	2300      	movs	r3, #0
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	e039      	b.n	80012dc <SCH_Dispatch_Tasks+0x80>
 		if (SCH_tasks_G[Index].RunMe> 0) {
 8001268:	79fa      	ldrb	r2, [r7, #7]
 800126a:	4920      	ldr	r1, [pc, #128]	; (80012ec <SCH_Dispatch_Tasks+0x90>)
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	330c      	adds	r3, #12
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d02b      	beq.n	80012d6 <SCH_Dispatch_Tasks+0x7a>
 			(*SCH_tasks_G[Index].pTask)(); // Run the task
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	491a      	ldr	r1, [pc, #104]	; (80012ec <SCH_Dispatch_Tasks+0x90>)
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4798      	blx	r3
 			SCH_tasks_G[Index].RunMe--; // Reset / reduceRunMe flag
 8001290:	79fa      	ldrb	r2, [r7, #7]
 8001292:	4916      	ldr	r1, [pc, #88]	; (80012ec <SCH_Dispatch_Tasks+0x90>)
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	330c      	adds	r3, #12
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b2d8      	uxtb	r0, r3
 80012a6:	4911      	ldr	r1, [pc, #68]	; (80012ec <SCH_Dispatch_Tasks+0x90>)
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	330c      	adds	r3, #12
 80012b4:	4602      	mov	r2, r0
 80012b6:	701a      	strb	r2, [r3, #0]
 			// Periodic tasks will automatically run again
 			// − if this is a ’one shot’ task, remove it from the array
 			if (SCH_tasks_G[Index].Period == 0){
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	490c      	ldr	r1, [pc, #48]	; (80012ec <SCH_Dispatch_Tasks+0x90>)
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	3308      	adds	r3, #8
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <SCH_Dispatch_Tasks+0x7a>
 				SCH_Delete_Task(Index);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fee3 	bl	800109c <SCH_Delete_Task>
 	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	3301      	adds	r3, #1
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b27      	cmp	r3, #39	; 0x27
 80012e0:	d9c2      	bls.n	8001268 <SCH_Dispatch_Tasks+0xc>
 			}
 		}
 }
 }
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000011c 	.word	0x2000011c

080012f0 <SCH_Add_Task>:
 		}
 	}
 #endif
 }

 uint32_t SCH_Add_Task(void (* pFunction) (), uint32_t DELAY, uint32_t PERIOD){
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 	unsigned char Index = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	75fb      	strb	r3, [r7, #23]
 	// First find a gap in the array (if there is one)
 	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8001300:	e002      	b.n	8001308 <SCH_Add_Task+0x18>
 		Index++;
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	3301      	adds	r3, #1
 8001306:	75fb      	strb	r3, [r7, #23]
 	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8001308:	7dfa      	ldrb	r2, [r7, #23]
 800130a:	4924      	ldr	r1, [pc, #144]	; (800139c <SCH_Add_Task+0xac>)
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <SCH_Add_Task+0x32>
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	2b27      	cmp	r3, #39	; 0x27
 8001320:	d9ef      	bls.n	8001302 <SCH_Add_Task+0x12>
 	}
 	 // Have we reached the end of the list?
 	 if (Index ==SCH_MAX_TASKS){
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	2b28      	cmp	r3, #40	; 0x28
 8001326:	d104      	bne.n	8001332 <SCH_Add_Task+0x42>
 		 // Task list is full
 		 // Set the global error variable
 		 Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <SCH_Add_Task+0xb0>)
 800132a:	2235      	movs	r2, #53	; 0x35
 800132c:	701a      	strb	r2, [r3, #0]
 		 // Also return an error code
 		 return SCH_MAX_TASKS;
 800132e:	2328      	movs	r3, #40	; 0x28
 8001330:	e02f      	b.n	8001392 <SCH_Add_Task+0xa2>
 	 }
 	 // If we’re here, there is a space in the task array
 	 SCH_tasks_G[Index].pTask = pFunction;
 8001332:	7dfa      	ldrb	r2, [r7, #23]
 8001334:	4919      	ldr	r1, [pc, #100]	; (800139c <SCH_Add_Task+0xac>)
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	601a      	str	r2, [r3, #0]
 	 SCH_tasks_G[Index].Delay = DELAY / TICK;
 8001344:	7dfa      	ldrb	r2, [r7, #23]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	4916      	ldr	r1, [pc, #88]	; (80013a4 <SCH_Add_Task+0xb4>)
 800134a:	fba1 1303 	umull	r1, r3, r1, r3
 800134e:	08d9      	lsrs	r1, r3, #3
 8001350:	4812      	ldr	r0, [pc, #72]	; (800139c <SCH_Add_Task+0xac>)
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4403      	add	r3, r0
 800135c:	3304      	adds	r3, #4
 800135e:	6019      	str	r1, [r3, #0]
 	 SCH_tasks_G[Index].Period = PERIOD / TICK;
 8001360:	7dfa      	ldrb	r2, [r7, #23]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	490f      	ldr	r1, [pc, #60]	; (80013a4 <SCH_Add_Task+0xb4>)
 8001366:	fba1 1303 	umull	r1, r3, r1, r3
 800136a:	08d9      	lsrs	r1, r3, #3
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <SCH_Add_Task+0xac>)
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4403      	add	r3, r0
 8001378:	3308      	adds	r3, #8
 800137a:	6019      	str	r1, [r3, #0]
 	 SCH_tasks_G[Index].RunMe= 0;
 800137c:	7dfa      	ldrb	r2, [r7, #23]
 800137e:	4907      	ldr	r1, [pc, #28]	; (800139c <SCH_Add_Task+0xac>)
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	330c      	adds	r3, #12
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
 	 // return position of task (to allow later deletion)
 	 return Index;
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 }
 8001392:	4618      	mov	r0, r3
 8001394:	371c      	adds	r7, #28
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	2000011c 	.word	0x2000011c
 80013a0:	200000b0 	.word	0x200000b0
 80013a4:	cccccccd 	.word	0xcccccccd

080013a8 <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer1(int duration){
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80013b0:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <setTimer1+0x20>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <setTimer1+0x24>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	200000b4 	.word	0x200000b4
 80013cc:	200000b8 	.word	0x200000b8

080013d0 <setTimer2>:

void setTimer2(int duration){
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <setTimer2+0x20>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <setTimer2+0x24>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	200000bc 	.word	0x200000bc
 80013f4:	200000c0 	.word	0x200000c0

080013f8 <setTimer3>:

void setTimer3(int duration){
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001400:	4a05      	ldr	r2, [pc, #20]	; (8001418 <setTimer3+0x20>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <setTimer3+0x24>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	200000c4 	.word	0x200000c4
 800141c:	200000c8 	.word	0x200000c8

08001420 <setTimer4>:
void setTimer4(int duration){
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001428:	4a05      	ldr	r2, [pc, #20]	; (8001440 <setTimer4+0x20>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <setTimer4+0x24>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200000cc 	.word	0x200000cc
 8001444:	200000d0 	.word	0x200000d0

08001448 <timerRun>:
void timerRun(){
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 800144c:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <timerRun+0x8c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	dd0b      	ble.n	800146c <timerRun+0x24>
		timer1_counter--;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <timerRun+0x8c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3b01      	subs	r3, #1
 800145a:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <timerRun+0x8c>)
 800145c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <timerRun+0x8c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	dc02      	bgt.n	800146c <timerRun+0x24>
			timer1_flag = 1;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <timerRun+0x90>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <timerRun+0x94>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	dd0b      	ble.n	800148c <timerRun+0x44>
		timer2_counter--;
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <timerRun+0x94>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	4a18      	ldr	r2, [pc, #96]	; (80014dc <timerRun+0x94>)
 800147c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <timerRun+0x94>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	dc02      	bgt.n	800148c <timerRun+0x44>
			timer2_flag = 1;
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <timerRun+0x98>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <timerRun+0x9c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	dd0b      	ble.n	80014ac <timerRun+0x64>
		timer3_counter--;
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <timerRun+0x9c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <timerRun+0x9c>)
 800149c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <timerRun+0x9c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	dc02      	bgt.n	80014ac <timerRun+0x64>
			timer3_flag = 1;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <timerRun+0xa0>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <timerRun+0xa4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	dd0b      	ble.n	80014cc <timerRun+0x84>
		timer4_counter--;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <timerRun+0xa4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <timerRun+0xa4>)
 80014bc:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <timerRun+0xa4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	dc02      	bgt.n	80014cc <timerRun+0x84>
			timer4_flag = 1;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <timerRun+0xa8>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	200000b4 	.word	0x200000b4
 80014d8:	200000b8 	.word	0x200000b8
 80014dc:	200000bc 	.word	0x200000bc
 80014e0:	200000c0 	.word	0x200000c0
 80014e4:	200000c4 	.word	0x200000c4
 80014e8:	200000c8 	.word	0x200000c8
 80014ec:	200000cc 	.word	0x200000cc
 80014f0:	200000d0 	.word	0x200000d0

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_MspInit+0x5c>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_MspInit+0x5c>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6193      	str	r3, [r2, #24]
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_MspInit+0x5c>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_MspInit+0x5c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_MspInit+0x5c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_MspInit+0x5c>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_MspInit+0x60>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_MspInit+0x60>)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40021000 	.word	0x40021000
 8001554:	40010000 	.word	0x40010000

08001558 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001568:	d113      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_TIM_Base_MspInit+0x44>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <HAL_TIM_Base_MspInit+0x44>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_TIM_Base_MspInit+0x44>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	201c      	movs	r0, #28
 8001588:	f000 fa2b 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800158c:	201c      	movs	r0, #28
 800158e:	f000 fa44 	bl	8001a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e6:	f000 f909 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <TIM2_IRQHandler+0x10>)
 80015f6:	f001 f865 	bl	80026c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200000d4 	.word	0x200000d4

08001604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <clear_traffic_light>:
 *      Author: Fung
 */

#include "traffic_light.h"

void clear_traffic_light(){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_NS_GPIO_Port, RED_NS_Pin, RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2110      	movs	r1, #16
 8001618:	480f      	ldr	r0, [pc, #60]	; (8001658 <clear_traffic_light+0x48>)
 800161a:	f000 fbaa 	bl	8001d72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_EW_GPIO_Port, RED_EW_Pin, RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <clear_traffic_light+0x48>)
 8001624:	f000 fba5 	bl	8001d72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_NS_GPIO_Port, YELLOW_NS_Pin, RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2120      	movs	r1, #32
 800162c:	480a      	ldr	r0, [pc, #40]	; (8001658 <clear_traffic_light+0x48>)
 800162e:	f000 fba0 	bl	8001d72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_EW_GPIO_Port, YELLOW_EW_Pin, RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <clear_traffic_light+0x48>)
 800163a:	f000 fb9a 	bl	8001d72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_NS_GPIO_Port, GREEN_NS_Pin, RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2140      	movs	r1, #64	; 0x40
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <clear_traffic_light+0x48>)
 8001644:	f000 fb95 	bl	8001d72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_EW_GPIO_Port, GREEN_EW_Pin, RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164e:	4802      	ldr	r0, [pc, #8]	; (8001658 <clear_traffic_light+0x48>)
 8001650:	f000 fb8f 	bl	8001d72 <HAL_GPIO_WritePin>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010800 	.word	0x40010800

0800165c <onRed_NS>:
void onRed_NS(){
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_NS_GPIO_Port, RED_NS_Pin, SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2110      	movs	r1, #16
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <onRed_NS+0x14>)
 8001666:	f000 fb84 	bl	8001d72 <HAL_GPIO_WritePin>
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40010800 	.word	0x40010800

08001674 <onYellow_NS>:
void onYellow_NS(){
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW_NS_GPIO_Port, YELLOW_NS_Pin, SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2120      	movs	r1, #32
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <onYellow_NS+0x14>)
 800167e:	f000 fb78 	bl	8001d72 <HAL_GPIO_WritePin>
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40010800 	.word	0x40010800

0800168c <onGreen_NS>:
void onGreen_NS(){
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_NS_GPIO_Port, GREEN_NS_Pin, SET);
 8001690:	2201      	movs	r2, #1
 8001692:	2140      	movs	r1, #64	; 0x40
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <onGreen_NS+0x14>)
 8001696:	f000 fb6c 	bl	8001d72 <HAL_GPIO_WritePin>
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40010800 	.word	0x40010800

080016a4 <onRed_EW>:
void onRed_EW(){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_EW_GPIO_Port, RED_EW_Pin, SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <onRed_EW+0x14>)
 80016ae:	f000 fb60 	bl	8001d72 <HAL_GPIO_WritePin>
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40010800 	.word	0x40010800

080016bc <onYellow_EW>:
void onYellow_EW(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW_EW_GPIO_Port, YELLOW_EW_Pin, SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c6:	4802      	ldr	r0, [pc, #8]	; (80016d0 <onYellow_EW+0x14>)
 80016c8:	f000 fb53 	bl	8001d72 <HAL_GPIO_WritePin>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40010800 	.word	0x40010800

080016d4 <onGreen_EW>:
void onGreen_EW(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_EW_GPIO_Port, GREEN_EW_Pin, SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016de:	4802      	ldr	r0, [pc, #8]	; (80016e8 <onGreen_EW+0x14>)
 80016e0:	f000 fb47 	bl	8001d72 <HAL_GPIO_WritePin>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40010800 	.word	0x40010800

080016ec <time>:

void time(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	if(timer4_flag == 1){
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <time+0x2c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d10c      	bne.n	8001712 <time+0x26>
		setTimer4(100);
 80016f8:	2064      	movs	r0, #100	; 0x64
 80016fa:	f7ff fe91 	bl	8001420 <setTimer4>
		duration_led_NS--;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <time+0x30>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3b01      	subs	r3, #1
 8001704:	4a05      	ldr	r2, [pc, #20]	; (800171c <time+0x30>)
 8001706:	6013      	str	r3, [r2, #0]
		duration_led_EW--;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <time+0x34>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3b01      	subs	r3, #1
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <time+0x34>)
 8001710:	6013      	str	r3, [r2, #0]
	}
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200000d0 	.word	0x200000d0
 800171c:	20000054 	.word	0x20000054
 8001720:	20000058 	.word	0x20000058

08001724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001724:	f7ff ff6e 	bl	8001604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800172a:	490c      	ldr	r1, [pc, #48]	; (800175c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800172c:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <LoopFillZerobss+0x16>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001740:	4c09      	ldr	r4, [pc, #36]	; (8001768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174e:	f001 faf9 	bl	8002d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001752:	f7ff fb59 	bl	8000e08 <main>
  bx lr
 8001756:	4770      	bx	lr
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001760:	08002de0 	.word	0x08002de0
  ldr r2, =_sbss
 8001764:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001768:	20000440 	.word	0x20000440

0800176c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC1_2_IRQHandler>
	...

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_Init+0x28>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_Init+0x28>)
 800177a:	f043 0310 	orr.w	r3, r3, #16
 800177e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f923 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001786:	200f      	movs	r0, #15
 8001788:	f000 f808 	bl	800179c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178c:	f7ff feb2 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40022000 	.word	0x40022000

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_InitTick+0x54>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_InitTick+0x58>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f93b 	bl	8001a36 <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00e      	b.n	80017e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d80a      	bhi.n	80017e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f000 f903 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017dc:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <HAL_InitTick+0x5c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000070 	.word	0x20000070
 80017f4:	20000078 	.word	0x20000078
 80017f8:	20000074 	.word	0x20000074

080017fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_IncTick+0x1c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_IncTick+0x20>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a03      	ldr	r2, [pc, #12]	; (800181c <HAL_IncTick+0x20>)
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	20000078 	.word	0x20000078
 800181c:	2000043c 	.word	0x2000043c

08001820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b02      	ldr	r3, [pc, #8]	; (8001830 <HAL_GetTick+0x10>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	2000043c 	.word	0x2000043c

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4906      	ldr	r1, [pc, #24]	; (80018cc <__NVIC_EnableIRQ+0x34>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff90 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff2d 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f4:	f7ff ff42 	bl	800187c <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff90 	bl	8001924 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5f 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff35 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffa2 	bl	8001988 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b08b      	sub	sp, #44	; 0x2c
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	e148      	b.n	8001cf6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a64:	2201      	movs	r2, #1
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f040 8137 	bne.w	8001cf0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4aa3      	ldr	r2, [pc, #652]	; (8001d14 <HAL_GPIO_Init+0x2c4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d05e      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001a8c:	4aa1      	ldr	r2, [pc, #644]	; (8001d14 <HAL_GPIO_Init+0x2c4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d875      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001a92:	4aa1      	ldr	r2, [pc, #644]	; (8001d18 <HAL_GPIO_Init+0x2c8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d058      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001a98:	4a9f      	ldr	r2, [pc, #636]	; (8001d18 <HAL_GPIO_Init+0x2c8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d86f      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001a9e:	4a9f      	ldr	r2, [pc, #636]	; (8001d1c <HAL_GPIO_Init+0x2cc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d052      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001aa4:	4a9d      	ldr	r2, [pc, #628]	; (8001d1c <HAL_GPIO_Init+0x2cc>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d869      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001aaa:	4a9d      	ldr	r2, [pc, #628]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d04c      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001ab0:	4a9b      	ldr	r2, [pc, #620]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d863      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001ab6:	4a9b      	ldr	r2, [pc, #620]	; (8001d24 <HAL_GPIO_Init+0x2d4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d046      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001abc:	4a99      	ldr	r2, [pc, #612]	; (8001d24 <HAL_GPIO_Init+0x2d4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d85d      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d82a      	bhi.n	8001b1c <HAL_GPIO_Init+0xcc>
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d859      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001aca:	a201      	add	r2, pc, #4	; (adr r2, 8001ad0 <HAL_GPIO_Init+0x80>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001b4b 	.word	0x08001b4b
 8001ad4:	08001b25 	.word	0x08001b25
 8001ad8:	08001b37 	.word	0x08001b37
 8001adc:	08001b79 	.word	0x08001b79
 8001ae0:	08001b7f 	.word	0x08001b7f
 8001ae4:	08001b7f 	.word	0x08001b7f
 8001ae8:	08001b7f 	.word	0x08001b7f
 8001aec:	08001b7f 	.word	0x08001b7f
 8001af0:	08001b7f 	.word	0x08001b7f
 8001af4:	08001b7f 	.word	0x08001b7f
 8001af8:	08001b7f 	.word	0x08001b7f
 8001afc:	08001b7f 	.word	0x08001b7f
 8001b00:	08001b7f 	.word	0x08001b7f
 8001b04:	08001b7f 	.word	0x08001b7f
 8001b08:	08001b7f 	.word	0x08001b7f
 8001b0c:	08001b7f 	.word	0x08001b7f
 8001b10:	08001b7f 	.word	0x08001b7f
 8001b14:	08001b2d 	.word	0x08001b2d
 8001b18:	08001b41 	.word	0x08001b41
 8001b1c:	4a82      	ldr	r2, [pc, #520]	; (8001d28 <HAL_GPIO_Init+0x2d8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b22:	e02c      	b.n	8001b7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e029      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	3304      	adds	r3, #4
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	e024      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	623b      	str	r3, [r7, #32]
          break;
 8001b3e:	e01f      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	330c      	adds	r3, #12
 8001b46:	623b      	str	r3, [r7, #32]
          break;
 8001b48:	e01a      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b52:	2304      	movs	r3, #4
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e013      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b60:	2308      	movs	r3, #8
 8001b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	611a      	str	r2, [r3, #16]
          break;
 8001b6a:	e009      	b.n	8001b80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	615a      	str	r2, [r3, #20]
          break;
 8001b76:	e003      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
          break;
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          break;
 8001b7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2bff      	cmp	r3, #255	; 0xff
 8001b84:	d801      	bhi.n	8001b8a <HAL_GPIO_Init+0x13a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	e001      	b.n	8001b8e <HAL_GPIO_Init+0x13e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2bff      	cmp	r3, #255	; 0xff
 8001b94:	d802      	bhi.n	8001b9c <HAL_GPIO_Init+0x14c>
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	e002      	b.n	8001ba2 <HAL_GPIO_Init+0x152>
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	3b08      	subs	r3, #8
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	210f      	movs	r1, #15
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	6a39      	ldr	r1, [r7, #32]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8090 	beq.w	8001cf0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd0:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <HAL_GPIO_Init+0x2dc>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <HAL_GPIO_Init+0x2dc>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_GPIO_Init+0x2dc>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be8:	4a51      	ldr	r2, [pc, #324]	; (8001d30 <HAL_GPIO_Init+0x2e0>)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a49      	ldr	r2, [pc, #292]	; (8001d34 <HAL_GPIO_Init+0x2e4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00d      	beq.n	8001c30 <HAL_GPIO_Init+0x1e0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a48      	ldr	r2, [pc, #288]	; (8001d38 <HAL_GPIO_Init+0x2e8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d007      	beq.n	8001c2c <HAL_GPIO_Init+0x1dc>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a47      	ldr	r2, [pc, #284]	; (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_GPIO_Init+0x1d8>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e004      	b.n	8001c32 <HAL_GPIO_Init+0x1e2>
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e002      	b.n	8001c32 <HAL_GPIO_Init+0x1e2>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_GPIO_Init+0x1e2>
 8001c30:	2300      	movs	r3, #0
 8001c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c34:	f002 0203 	and.w	r2, r2, #3
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	4093      	lsls	r3, r2
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c42:	493b      	ldr	r1, [pc, #236]	; (8001d30 <HAL_GPIO_Init+0x2e0>)
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c5c:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	4937      	ldr	r1, [pc, #220]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c6a:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4933      	ldr	r1, [pc, #204]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c84:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	492d      	ldr	r1, [pc, #180]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60cb      	str	r3, [r1, #12]
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c92:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4929      	ldr	r1, [pc, #164]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cac:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4923      	ldr	r1, [pc, #140]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	491f      	ldr	r1, [pc, #124]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4919      	ldr	r1, [pc, #100]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4915      	ldr	r1, [pc, #84]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f47f aeaf 	bne.w	8001a64 <HAL_GPIO_Init+0x14>
  }
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	372c      	adds	r7, #44	; 0x2c
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	10320000 	.word	0x10320000
 8001d18:	10310000 	.word	0x10310000
 8001d1c:	10220000 	.word	0x10220000
 8001d20:	10210000 	.word	0x10210000
 8001d24:	10120000 	.word	0x10120000
 8001d28:	10110000 	.word	0x10110000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40010800 	.word	0x40010800
 8001d38:	40010c00 	.word	0x40010c00
 8001d3c:	40011000 	.word	0x40011000
 8001d40:	40010400 	.word	0x40010400

08001d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e001      	b.n	8001d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	807b      	strh	r3, [r7, #2]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d82:	787b      	ldrb	r3, [r7, #1]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d88:	887a      	ldrh	r2, [r7, #2]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d8e:	e003      	b.n	8001d98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	041a      	lsls	r2, r3, #16
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	611a      	str	r2, [r3, #16]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b085      	sub	sp, #20
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001db4:	887a      	ldrh	r2, [r7, #2]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4013      	ands	r3, r2
 8001dba:	041a      	lsls	r2, r3, #16
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	400b      	ands	r3, r1
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	611a      	str	r2, [r3, #16]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e26c      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8087 	beq.w	8001f02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df4:	4b92      	ldr	r3, [pc, #584]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d00c      	beq.n	8001e1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e00:	4b8f      	ldr	r3, [pc, #572]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d112      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5e>
 8001e0c:	4b8c      	ldr	r3, [pc, #560]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d10b      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1a:	4b89      	ldr	r3, [pc, #548]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d06c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x12c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d168      	bne.n	8001f00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e246      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x76>
 8001e3c:	4b80      	ldr	r3, [pc, #512]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a7f      	ldr	r2, [pc, #508]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e02e      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x98>
 8001e52:	4b7b      	ldr	r3, [pc, #492]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7a      	ldr	r2, [pc, #488]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b78      	ldr	r3, [pc, #480]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a77      	ldr	r2, [pc, #476]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e01d      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0xbc>
 8001e76:	4b72      	ldr	r3, [pc, #456]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a71      	ldr	r2, [pc, #452]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6e      	ldr	r2, [pc, #440]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e90:	4b6b      	ldr	r3, [pc, #428]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6a      	ldr	r2, [pc, #424]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b68      	ldr	r3, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a67      	ldr	r2, [pc, #412]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fcb6 	bl	8001820 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fcb2 	bl	8001820 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1fa      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xe4>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fca2 	bl	8001820 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fc9e 	bl	8001820 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1e6      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x10c>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d063      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0e:	4b4c      	ldr	r3, [pc, #304]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f1a:	4b49      	ldr	r3, [pc, #292]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x18c>
 8001f26:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x176>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1ba      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4939      	ldr	r1, [pc, #228]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e03a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fc57 	bl	8001820 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f76:	f7ff fc53 	bl	8001820 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e19b      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4927      	ldr	r1, [pc, #156]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_RCC_OscConfig+0x270>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fc36 	bl	8001820 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fc32 	bl	8001820 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e17a      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d03a      	beq.n	8002058 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d019      	beq.n	800201e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_RCC_OscConfig+0x274>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fc16 	bl	8001820 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7ff fc12 	bl	8001820 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e15a      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002016:	2001      	movs	r0, #1
 8002018:	f000 fa9a 	bl	8002550 <RCC_Delay>
 800201c:	e01c      	b.n	8002058 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_RCC_OscConfig+0x274>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7ff fbfc 	bl	8001820 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202a:	e00f      	b.n	800204c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7ff fbf8 	bl	8001820 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d908      	bls.n	800204c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e140      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	42420000 	.word	0x42420000
 8002048:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b9e      	ldr	r3, [pc, #632]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e9      	bne.n	800202c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a6 	beq.w	80021b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b97      	ldr	r3, [pc, #604]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10d      	bne.n	8002092 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b94      	ldr	r3, [pc, #592]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a93      	ldr	r2, [pc, #588]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	61d3      	str	r3, [r2, #28]
 8002082:	4b91      	ldr	r3, [pc, #580]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208e:	2301      	movs	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b8e      	ldr	r3, [pc, #568]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209e:	4b8b      	ldr	r3, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a8a      	ldr	r2, [pc, #552]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020aa:	f7ff fbb9 	bl	8001820 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7ff fbb5 	bl	8001820 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	; 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0fd      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b81      	ldr	r3, [pc, #516]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x312>
 80020d8:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a7a      	ldr	r2, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	e02d      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x334>
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a75      	ldr	r2, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a72      	ldr	r2, [pc, #456]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	6213      	str	r3, [r2, #32]
 8002106:	e01c      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d10c      	bne.n	800212a <HAL_RCC_OscConfig+0x356>
 8002110:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a6c      	ldr	r2, [pc, #432]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4a69      	ldr	r2, [pc, #420]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	e00b      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a66      	ldr	r2, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6213      	str	r3, [r2, #32]
 8002136:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a63      	ldr	r2, [pc, #396]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d015      	beq.n	8002176 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7ff fb69 	bl	8001820 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7ff fb65 	bl	8001820 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0ab      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	4b57      	ldr	r3, [pc, #348]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ee      	beq.n	8002152 <HAL_RCC_OscConfig+0x37e>
 8002174:	e014      	b.n	80021a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7ff fb53 	bl	8001820 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7ff fb4f 	bl	8001820 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e095      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ee      	bne.n	800217e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a6:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a47      	ldr	r2, [pc, #284]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8081 	beq.w	80022be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d061      	beq.n	800228c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d146      	bne.n	800225e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCC_OscConfig+0x4fc>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7ff fb23 	bl	8001820 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7ff fb1f 	bl	8001820 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e067      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d108      	bne.n	8002218 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002206:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	492d      	ldr	r1, [pc, #180]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a19      	ldr	r1, [r3, #32]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	430b      	orrs	r3, r1
 800222a:	4927      	ldr	r1, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x4fc>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7ff faf3 	bl	8001820 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7ff faef 	bl	8001820 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e037      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x46a>
 800225c:	e02f      	b.n	80022be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_RCC_OscConfig+0x4fc>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff fadc 	bl	8001820 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff fad8 	bl	8001820 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e020      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x498>
 800228a:	e018      	b.n	80022be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e013      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40007000 	.word	0x40007000
 80022d0:	42420060 	.word	0x42420060

080022d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0d0      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d910      	bls.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b67      	ldr	r3, [pc, #412]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	4965      	ldr	r1, [pc, #404]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b63      	ldr	r3, [pc, #396]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0b8      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002330:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800233a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002348:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a52      	ldr	r2, [pc, #328]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002354:	4b50      	ldr	r3, [pc, #320]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	494d      	ldr	r1, [pc, #308]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d040      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d115      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e07f      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e073      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e06b      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4936      	ldr	r1, [pc, #216]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7ff fa2c 	bl	8001820 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7ff fa28 	bl	8001820 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e053      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d210      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 0207 	bic.w	r2, r3, #7
 800240a:	4922      	ldr	r1, [pc, #136]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e032      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4916      	ldr	r1, [pc, #88]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	490e      	ldr	r1, [pc, #56]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002462:	f000 f821 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002466:	4602      	mov	r2, r0
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	490a      	ldr	r1, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	5ccb      	ldrb	r3, [r1, r3]
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <HAL_RCC_ClockConfig+0x1cc>)
 800247c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff f98a 	bl	800179c <HAL_InitTick>

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000
 8002498:	40021000 	.word	0x40021000
 800249c:	08002db4 	.word	0x08002db4
 80024a0:	20000070 	.word	0x20000070
 80024a4:	20000074 	.word	0x20000074

080024a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	; (800253c <HAL_RCC_GetSysClockFreq+0x94>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x30>
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d003      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x36>
 80024d6:	e027      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 80024da:	613b      	str	r3, [r7, #16]
      break;
 80024dc:	e027      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	4a17      	ldr	r2, [pc, #92]	; (8002544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d010      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_RCC_GetSysClockFreq+0x94>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	0c5b      	lsrs	r3, r3, #17
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	4a11      	ldr	r2, [pc, #68]	; (8002548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 800250a:	fb02 f203 	mul.w	r2, r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e004      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a0c      	ldr	r2, [pc, #48]	; (800254c <HAL_RCC_GetSysClockFreq+0xa4>)
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	613b      	str	r3, [r7, #16]
      break;
 8002526:	e002      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 800252a:	613b      	str	r3, [r7, #16]
      break;
 800252c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252e:	693b      	ldr	r3, [r7, #16]
}
 8002530:	4618      	mov	r0, r3
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	007a1200 	.word	0x007a1200
 8002544:	08002dc4 	.word	0x08002dc4
 8002548:	08002dd4 	.word	0x08002dd4
 800254c:	003d0900 	.word	0x003d0900

08002550 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <RCC_Delay+0x34>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <RCC_Delay+0x38>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	0a5b      	lsrs	r3, r3, #9
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800256c:	bf00      	nop
  }
  while (Delay --);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	60fa      	str	r2, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f9      	bne.n	800256c <RCC_Delay+0x1c>
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	20000070 	.word	0x20000070
 8002588:	10624dd3 	.word	0x10624dd3

0800258c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e041      	b.n	8002622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe ffd0 	bl	8001558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3304      	adds	r3, #4
 80025c8:	4619      	mov	r1, r3
 80025ca:	4610      	mov	r0, r2
 80025cc:	f000 fa56 	bl	8002a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d001      	beq.n	8002644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e035      	b.n	80026b0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a16      	ldr	r2, [pc, #88]	; (80026bc <HAL_TIM_Base_Start_IT+0x90>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d009      	beq.n	800267a <HAL_TIM_Base_Start_IT+0x4e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266e:	d004      	beq.n	800267a <HAL_TIM_Base_Start_IT+0x4e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <HAL_TIM_Base_Start_IT+0x94>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d111      	bne.n	800269e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b06      	cmp	r3, #6
 800268a:	d010      	beq.n	80026ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269c:	e007      	b.n	80026ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40000400 	.word	0x40000400

080026c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d020      	beq.n	8002728 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01b      	beq.n	8002728 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0202 	mvn.w	r2, #2
 80026f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f998 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 8002714:	e005      	b.n	8002722 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f98b 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f99a 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d020      	beq.n	8002774 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0204 	mvn.w	r2, #4
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f972 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f965 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f974 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d020      	beq.n	80027c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01b      	beq.n	80027c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0208 	mvn.w	r2, #8
 8002790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2204      	movs	r2, #4
 8002796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f94c 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f93f 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f94e 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d020      	beq.n	800280c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01b      	beq.n	800280c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0210 	mvn.w	r2, #16
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2208      	movs	r2, #8
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f926 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f919 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f928 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00c      	beq.n	8002830 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0201 	mvn.w	r2, #1
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fc26 	bl	800107c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800284c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fa6f 	bl	8002d32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f8f8 	bl	8002a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00c      	beq.n	800289c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0220 	mvn.w	r2, #32
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa42 	bl	8002d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_TIM_ConfigClockSource+0x1c>
 80028bc:	2302      	movs	r3, #2
 80028be:	e0b4      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0x186>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f8:	d03e      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0xd4>
 80028fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fe:	f200 8087 	bhi.w	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002906:	f000 8086 	beq.w	8002a16 <HAL_TIM_ConfigClockSource+0x172>
 800290a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290e:	d87f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b70      	cmp	r3, #112	; 0x70
 8002912:	d01a      	beq.n	800294a <HAL_TIM_ConfigClockSource+0xa6>
 8002914:	2b70      	cmp	r3, #112	; 0x70
 8002916:	d87b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b60      	cmp	r3, #96	; 0x60
 800291a:	d050      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x11a>
 800291c:	2b60      	cmp	r3, #96	; 0x60
 800291e:	d877      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b50      	cmp	r3, #80	; 0x50
 8002922:	d03c      	beq.n	800299e <HAL_TIM_ConfigClockSource+0xfa>
 8002924:	2b50      	cmp	r3, #80	; 0x50
 8002926:	d873      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	d058      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x13a>
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d86f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b30      	cmp	r3, #48	; 0x30
 8002932:	d064      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002934:	2b30      	cmp	r3, #48	; 0x30
 8002936:	d86b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b20      	cmp	r3, #32
 800293a:	d060      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 800293c:	2b20      	cmp	r3, #32
 800293e:	d867      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05c      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002944:	2b10      	cmp	r3, #16
 8002946:	d05a      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002948:	e062      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6899      	ldr	r1, [r3, #8]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f000 f96a 	bl	8002c32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800296c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	609a      	str	r2, [r3, #8]
      break;
 8002976:	e04f      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f000 f953 	bl	8002c32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800299a:	609a      	str	r2, [r3, #8]
      break;
 800299c:	e03c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f000 f8ca 	bl	8002b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2150      	movs	r1, #80	; 0x50
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f921 	bl	8002bfe <TIM_ITRx_SetConfig>
      break;
 80029bc:	e02c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 f8e8 	bl	8002ba0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2160      	movs	r1, #96	; 0x60
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f911 	bl	8002bfe <TIM_ITRx_SetConfig>
      break;
 80029dc:	e01c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 f8aa 	bl	8002b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2140      	movs	r1, #64	; 0x40
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f901 	bl	8002bfe <TIM_ITRx_SetConfig>
      break;
 80029fc:	e00c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f000 f8f8 	bl	8002bfe <TIM_ITRx_SetConfig>
      break;
 8002a0e:	e003      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e000      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <TIM_Base_SetConfig+0xc0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <TIM_Base_SetConfig+0x28>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d003      	beq.n	8002aa4 <TIM_Base_SetConfig+0x28>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <TIM_Base_SetConfig+0xc4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d108      	bne.n	8002ab6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a20      	ldr	r2, [pc, #128]	; (8002b3c <TIM_Base_SetConfig+0xc0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <TIM_Base_SetConfig+0x52>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d003      	beq.n	8002ace <TIM_Base_SetConfig+0x52>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <TIM_Base_SetConfig+0xc4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d108      	bne.n	8002ae0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a0d      	ldr	r2, [pc, #52]	; (8002b3c <TIM_Base_SetConfig+0xc0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d103      	bne.n	8002b14 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f023 0201 	bic.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	611a      	str	r2, [r3, #16]
  }
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	40000400 	.word	0x40000400

08002b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f023 0201 	bic.w	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f023 030a 	bic.w	r3, r3, #10
 8002b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f023 0210 	bic.w	r2, r3, #16
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	031b      	lsls	r3, r3, #12
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	621a      	str	r2, [r3, #32]
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f043 0307 	orr.w	r3, r3, #7
 8002c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b087      	sub	sp, #28
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	021a      	lsls	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	609a      	str	r2, [r3, #8]
}
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e041      	b.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d009      	beq.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd4:	d004      	beq.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a10      	ldr	r2, [pc, #64]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10c      	bne.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400

08002d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <__libc_init_array>:
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	2600      	movs	r6, #0
 8002d48:	4d0c      	ldr	r5, [pc, #48]	; (8002d7c <__libc_init_array+0x38>)
 8002d4a:	4c0d      	ldr	r4, [pc, #52]	; (8002d80 <__libc_init_array+0x3c>)
 8002d4c:	1b64      	subs	r4, r4, r5
 8002d4e:	10a4      	asrs	r4, r4, #2
 8002d50:	42a6      	cmp	r6, r4
 8002d52:	d109      	bne.n	8002d68 <__libc_init_array+0x24>
 8002d54:	f000 f822 	bl	8002d9c <_init>
 8002d58:	2600      	movs	r6, #0
 8002d5a:	4d0a      	ldr	r5, [pc, #40]	; (8002d84 <__libc_init_array+0x40>)
 8002d5c:	4c0a      	ldr	r4, [pc, #40]	; (8002d88 <__libc_init_array+0x44>)
 8002d5e:	1b64      	subs	r4, r4, r5
 8002d60:	10a4      	asrs	r4, r4, #2
 8002d62:	42a6      	cmp	r6, r4
 8002d64:	d105      	bne.n	8002d72 <__libc_init_array+0x2e>
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d6c:	4798      	blx	r3
 8002d6e:	3601      	adds	r6, #1
 8002d70:	e7ee      	b.n	8002d50 <__libc_init_array+0xc>
 8002d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d76:	4798      	blx	r3
 8002d78:	3601      	adds	r6, #1
 8002d7a:	e7f2      	b.n	8002d62 <__libc_init_array+0x1e>
 8002d7c:	08002dd8 	.word	0x08002dd8
 8002d80:	08002dd8 	.word	0x08002dd8
 8002d84:	08002dd8 	.word	0x08002dd8
 8002d88:	08002ddc 	.word	0x08002ddc

08002d8c <memset>:
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4402      	add	r2, r0
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d100      	bne.n	8002d96 <memset+0xa>
 8002d94:	4770      	bx	lr
 8002d96:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9a:	e7f9      	b.n	8002d90 <memset+0x4>

08002d9c <_init>:
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	bf00      	nop
 8002da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da2:	bc08      	pop	{r3}
 8002da4:	469e      	mov	lr, r3
 8002da6:	4770      	bx	lr

08002da8 <_fini>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	bf00      	nop
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr
